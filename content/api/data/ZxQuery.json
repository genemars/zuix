[
  {
    "tags": [],
    "description": {
      "full": "Copyright 2015-2017 G-Labs. All Rights Reserved.\n        https://genielabs.github.io/zuix\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.",
      "summary": "Copyright 2015-2017 G-Labs. All Rights Reserved.\n        https://genielabs.github.io/zuix",
      "body": "Licensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License."
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 1,
    "codeStart": 17
  },
  {
    "tags": [
      {
        "type": "author",
        "string": "Generoso Martello <generoso@martello.com>"
      }
    ],
    "description": {
      "full": "This file is part of\n ZUIX, Javascript library for component-based development.\n       https://genielabs.github.io/zuix",
      "summary": "This file is part of\n ZUIX, Javascript library for component-based development.\n       https://genielabs.github.io/zuix",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 18,
    "codeStart": 27,
    "code": "\"use strict\";\n\nvar _log =\n    require('./Logger')('TaskQueue.js');\nvar util = require('./Util.js');",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "callback",
        "string": "ZxQuery~iterationCallback"
      },
      {
        "type": "param",
        "string": "{number} i Iteration count",
        "name": "i",
        "description": "Iteration count",
        "types": [
          "number"
        ],
        "typesDescription": "<code>number</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{object} item Current element",
        "name": "item",
        "description": "Current element",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "this",
        "string": "{object}"
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 33,
    "codeStart": 40
  },
  {
    "tags": [
      {
        "type": "callback",
        "string": "ZxQuery~instanceIterationCallback"
      },
      {
        "type": "param",
        "string": "{number} count Iteration count",
        "name": "count",
        "description": "Iteration count",
        "types": [
          "number"
        ],
        "typesDescription": "<code>number</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{Element} item Current element",
        "name": "item",
        "description": "Current element",
        "types": [
          "Element"
        ],
        "typesDescription": "<code>Element</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "this",
        "string": "{ZxQuery}"
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 41,
    "codeStart": 48
  },
  {
    "tags": [
      {
        "type": "private",
        "string": "",
        "visibility": "private"
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 50,
    "codeStart": 51,
    "code": "var _zuix_events_mapping = [];\nfunction routeEvent(e) {\n    triggerEventHandlers(this, e.type, e);\n\n}\nfunction addEventHandler(el, path, handler) {\n    var found = false;\n    z$.each(_zuix_events_mapping, function () {\n        if (this.element === el && this.path === path && this.handler == handler) {\n            _log.w('Handler already registered', el, path, handler);\n            found = true;\n            return false;\n        }\n    });\n    if (!found) {\n        _zuix_events_mapping.push({ element: el, path: path, handler: handler });\n        el.addEventListener(path, routeEvent, false);\n    }\n}\nfunction removeEventHandler(el, path, handler) {\n    var left = 1, index = -1;\n    z$.each(_zuix_events_mapping, function (i) {\n        if (this.element === el && this.path === path && this.handler == handler) {\n            left--;\n            index = i;\n        }\n    });\n    if (index !== -1)\n        _zuix_events_mapping.splice(index, 1);\n    // unregister event handler since it was the last one\n    if (left == 0)\n        el.removeEventListener(path, routeEvent);\n}\nfunction triggerEventHandlers(el, path, evt) {\n    var element = z$(el);\n    z$.each(_zuix_events_mapping, function () {\n        if (this.element === el && this.path === path) {\n            this.handler.call(element, evt);\n        }\n    });\n}\nfunction removeAllEventHandlers(el) {\n    z$.each(_zuix_events_mapping, function () {\n        if (this.element === el) {\n            _log.t('Removing event handler', this.element, this.path, this.handler);\n            removeEventHandler(this.element, this.path, this.handler);\n        }\n    });\n}",
    "ctx": {
      "type": "declaration",
      "name": "_zuix_events_mapping",
      "value": "[]",
      "string": "_zuix_events_mapping"
    }
  },
  {
    "tags": [
      {
        "type": "class",
        "string": "ZxQuery"
      },
      {
        "type": "param",
        "string": "{Object|ZxQuery|Array<Node>|Node|NodeList|string|undefined} [element]",
        "name": "[element]",
        "description": "",
        "types": [
          "Object",
          "ZxQuery",
          "Array.<Node>",
          "Node",
          "NodeList",
          "string"
        ],
        "typesDescription": "<code>Object</code>|<a href=\"ZxQuery.html\">ZxQuery</a>|<code>Array</code>.&lt;<code>Node</code>&gt;|<code>Node</code>|<code>NodeList</code>|<code>string</code>|<code>undefined</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{ZxQuery} The *ZxQuery* instance object.",
        "types": [
          "ZxQuery"
        ],
        "typesDescription": "<a href=\"ZxQuery.html\">ZxQuery</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "The *ZxQuery* instance object."
      },
      {
        "type": "constructor",
        "string": ""
      }
    ],
    "description": {
      "full": "ZxQuery, a very lite subset of jQuery-like functions\ninternally used in Zuix.\n\nThe constructor takes one optional argument that can be\na DOM element, a node list or a valid DOM query selector string expression.\nIf no parameter is given, the ZxQuery will wrap the root *document* element.",
      "summary": "ZxQuery, a very lite subset of jQuery-like functions\ninternally used in Zuix.",
      "body": "The constructor takes one optional argument that can be\na DOM element, a node list or a valid DOM query selector string expression.\nIf no parameter is given, the ZxQuery will wrap the root *document* element."
    },
    "isPrivate": false,
    "isConstructor": true,
    "isClass": true,
    "isEvent": false,
    "ignore": false,
    "line": 101,
    "codeStart": 114,
    "code": "function ZxQuery(element) {",
    "ctx": {
      "type": "constructor",
      "name": "ZxQuery",
      "string": "ZxQuery()"
    }
  },
  {
    "tags": [
      {
        "type": "protected",
        "string": "",
        "visibility": "protected"
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 115,
    "codeStart": 116,
    "code": "this._selection = [];\n\nif (typeof element === 'undefined')\n    element = document.documentElement;\n\nif (element instanceof ZxQuery)\n    return element;\nelse if (element instanceof HTMLCollection || element instanceof NodeList || Array.isArray(element))\n    this._selection = element;\nelse if (element instanceof HTMLElement || element instanceof Node)\n    this._selection = [element];\nelse if (typeof element === 'string')\n    this._selection = document.documentElement.querySelectorAll(element);\nelse if (element !== null) { //if (typeof element === 'string') {\n    _log.e('ZxQuery cannot wrap object of this type.', (typeof element), element);\n    throw(new Error(), element);\n}\nreturn this;\n}",
    "ctx": {
      "type": "property",
      "receiver": "this",
      "name": "_selection",
      "value": "[]",
      "string": "this._selection"
    }
  },
  {
    "tags": [
      {
        "type": "return",
        "string": "{Number} Number of DOM elements in the current selection.",
        "types": [
          "Number"
        ],
        "typesDescription": "<code>Number</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "Number of DOM elements in the current selection."
      }
    ],
    "description": {
      "full": "Number of elements in current DOM selection.",
      "summary": "Number of elements in current DOM selection.",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 137,
    "codeStart": 141,
    "code": "ZxQuery.prototype.length = function () {\n    return this._selection.length;\n};",
    "ctx": {
      "type": "method",
      "constructor": "ZxQuery",
      "cons": "ZxQuery",
      "name": "length",
      "string": "ZxQuery.prototype.length()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{string} [filter] A valid DOM query selector filter (**default:** *first parent*).",
        "name": "[filter]",
        "description": "A valid DOM query selector filter (**default:** *first parent*).",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{ZxQuery} A new *ZxQuery* object with the *parent* selection.",
        "types": [
          "ZxQuery"
        ],
        "typesDescription": "<a href=\"ZxQuery.html\">ZxQuery</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "A new *ZxQuery* object with the *parent* selection."
      }
    ],
    "description": {
      "full": "Get the closest parent matching the selector filter.",
      "summary": "Get the closest parent matching the selector filter.",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 144,
    "codeStart": 149,
    "code": "ZxQuery.prototype.parent = function (filter) {\n    if (!util.isNoU(filter))\n        return new ZxQuery(z$.getClosest(this._selection[0], filter));\n    return new ZxQuery(this._selection[0].parentNode);\n};",
    "ctx": {
      "type": "method",
      "constructor": "ZxQuery",
      "cons": "ZxQuery",
      "name": "parent",
      "string": "ZxQuery.prototype.parent()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{string} [filter] A valid DOM query selector filter (**default:** *all children*).",
        "name": "[filter]",
        "description": "A valid DOM query selector filter (**default:** *all children*).",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{ZxQuery}  A new *ZxQuery* object with the *children* selection.",
        "types": [
          "ZxQuery"
        ],
        "typesDescription": "<a href=\"ZxQuery.html\">ZxQuery</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "A new *ZxQuery* object with the *children* selection."
      }
    ],
    "description": {
      "full": "Get the children matching the given selector filter.",
      "summary": "Get the children matching the given selector filter.",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 154,
    "codeStart": 159,
    "code": "ZxQuery.prototype.children = function (filter) {\n    // TODO: implement filtering\n    if (!util.isNoU(filter))\n        return new ZxQuery(this._selection[0].querySelectorAll(filter));\n    return new ZxQuery(this._selection[0].children);\n};",
    "ctx": {
      "type": "method",
      "constructor": "ZxQuery",
      "cons": "ZxQuery",
      "name": "children",
      "string": "ZxQuery.prototype.children()"
    }
  },
  {
    "tags": [
      {
        "type": "return",
        "string": "{ZxQuery} The *ZxQuery* object itself",
        "types": [
          "ZxQuery"
        ],
        "typesDescription": "<a href=\"ZxQuery.html\">ZxQuery</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "The *ZxQuery* object itself"
      }
    ],
    "description": {
      "full": "Reverse the order of elements in current selection.",
      "summary": "Reverse the order of elements in current selection.",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 165,
    "codeStart": 169,
    "code": "ZxQuery.prototype.reverse = function () {\n    var elements = (Array.prototype.slice).call(this._selection, 0);\n    this._selection = elements.reverse();\n    return this;\n};",
    "ctx": {
      "type": "method",
      "constructor": "ZxQuery",
      "cons": "ZxQuery",
      "name": "reverse",
      "string": "ZxQuery.prototype.reverse()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{number} [i] Position of element (**default:** 0)",
        "name": "[i]",
        "description": "Position of element (**default:** 0)",
        "types": [
          "number"
        ],
        "typesDescription": "<code>number</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{Node|Element} The *DOM* element",
        "types": [
          "Node",
          "Element"
        ],
        "typesDescription": "<code>Node</code>|<code>Element</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "The *DOM* element"
      }
    ],
    "description": {
      "full": "Get the DOM element at given position in the current selection.\nIf no index is provided, the default element will be returned.",
      "summary": "Get the DOM element at given position in the current selection.\nIf no index is provided, the default element will be returned.",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 174,
    "codeStart": 181,
    "code": "ZxQuery.prototype.get = function (i) {\n    if (util.isNoU(i)) i = 0;\n    return this._selection[i];\n};",
    "ctx": {
      "type": "method",
      "constructor": "ZxQuery",
      "cons": "ZxQuery",
      "name": "get",
      "string": "ZxQuery.prototype.get()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{number} i Position of element",
        "name": "i",
        "description": "Position of element",
        "types": [
          "number"
        ],
        "typesDescription": "<code>number</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{ZxQuery} A new *ZxQuery* object",
        "types": [
          "ZxQuery"
        ],
        "typesDescription": "<a href=\"ZxQuery.html\">ZxQuery</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "A new *ZxQuery* object"
      }
    ],
    "description": {
      "full": "Get the ZxQuery object for then element at the given\nposition in the current selection.",
      "summary": "Get the ZxQuery object for then element at the given\nposition in the current selection.",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 185,
    "codeStart": 191,
    "code": "ZxQuery.prototype.eq = function (i) {\n    var selection = this._selection;\n    var resultSet = selection[i];\n    if (arguments.length > 1) {\n        resultSet = [];\n        z$.each(arguments, function (k, v) {\n            if (selection[v] != null)\n                resultSet.push(selection[v])\n        });\n    }\n    return new ZxQuery(resultSet);\n};",
    "ctx": {
      "type": "method",
      "constructor": "ZxQuery",
      "cons": "ZxQuery",
      "name": "eq",
      "string": "ZxQuery.prototype.eq()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{string} selector A valid *DOM* query selector",
        "name": "selector",
        "description": "A valid *DOM* query selector",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{ZxQuery} A new *ZxQuery* object",
        "types": [
          "ZxQuery"
        ],
        "typesDescription": "<a href=\"ZxQuery.html\">ZxQuery</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "A new *ZxQuery* object"
      }
    ],
    "description": {
      "full": "Select all descendants matching the given *DOM* query selector filter.",
      "summary": "Select all descendants matching the given *DOM* query selector filter.",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 203,
    "codeStart": 208,
    "code": "ZxQuery.prototype.find = function (selector) {\n    return new ZxQuery(this._selection[0].querySelectorAll(selector));\n};",
    "ctx": {
      "type": "method",
      "constructor": "ZxQuery",
      "cons": "ZxQuery",
      "name": "find",
      "string": "ZxQuery.prototype.find()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{ZxQuery~instanceIterationCallback} iterationCallback The callback *fn* to call at each iteration",
        "name": "iterationCallback",
        "description": "The callback *fn* to call at each iteration",
        "types": [],
        "typesDescription": "<code>?</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{ZxQuery} The *ZxQuery* object itself",
        "types": [
          "ZxQuery"
        ],
        "typesDescription": "<a href=\"ZxQuery.html\">ZxQuery</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "The *ZxQuery* object itself"
      }
    ],
    "description": {
      "full": "Iterate through all *DOM* elements in the selection.\nThe context object *this*, passed to the\n*iterationCallback*`(index, item)`, will be the\n*DOM* element corresponding the current iteration.\n`index` will be the iteration count, and `item`\nthe current Element. The context `this` will be a `{ZxQuery}`\ninstance wrapping the current `item`.\n\nIf the callback returns *false*, the iteration loop will interrupt.",
      "summary": "Iterate through all *DOM* elements in the selection.\nThe context object *this*, passed to the\n*iterationCallback*`(index, item)`, will be the\n*DOM* element corresponding the current iteration.\n`index` will be the iteration count, and `item`\nthe current Element. The context `this` will be a `{ZxQuery}`\ninstance wrapping the current `item`.",
      "body": "If the callback returns *false*, the iteration loop will interrupt."
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 211,
    "codeStart": 224,
    "code": "ZxQuery.prototype.each = function (iterationCallback) {\n    z$.each(this._selection, iterationCallback);\n    return this;\n};",
    "ctx": {
      "type": "method",
      "constructor": "ZxQuery",
      "cons": "ZxQuery",
      "name": "each",
      "string": "ZxQuery.prototype.each()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{string|JSON} attr The attribute name",
        "name": "attr",
        "description": "The attribute name",
        "types": [
          "string",
          "JSON"
        ],
        "typesDescription": "<code>string</code>|<a href=\"JSON.html\">JSON</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{string|undefined} [val] The attribute value",
        "name": "[val]",
        "description": "The attribute value",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>|<code>undefined</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{string|ZxQuery} The *attr* attribute value when no *val* specified, otherwise the *ZxQuery* object itself",
        "types": [
          "string",
          "ZxQuery"
        ],
        "typesDescription": "<code>string</code>|<a href=\"ZxQuery.html\">ZxQuery</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "The *attr* attribute value when no *val* specified, otherwise the *ZxQuery* object itself"
      }
    ],
    "description": {
      "full": "Gets or sets the given element attribute.",
      "summary": "Gets or sets the given element attribute.",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 228,
    "codeStart": 234,
    "code": "ZxQuery.prototype.attr = function (attr, val) {\n    var _t = this;\n    if (typeof attr === 'object') {\n        z$.each(attr, function (i, v) {\n            _t.each(function (k, el) {\n                el.setAttribute(i, v);\n            });\n        });\n    } else if (typeof val == 'undefined')\n        return this._selection[0].getAttribute(attr);\n    else if (val === null)\n        this._selection[0].removeAttribute(attr);\n    else\n        this.each(function (k, v) {\n            this.get().setAttribute(attr, val);\n        });\n    return this;\n};",
    "ctx": {
      "type": "method",
      "constructor": "ZxQuery",
      "cons": "ZxQuery",
      "name": "attr",
      "string": "ZxQuery.prototype.attr()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{string} eventPath Path of the event to trigger.",
        "name": "eventPath",
        "description": "Path of the event to trigger.",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{object} eventData Value of the event.",
        "name": "eventData",
        "description": "Value of the event.",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{ZxQuery} The *ZxQuery* object itself",
        "types": [
          "ZxQuery"
        ],
        "typesDescription": "<a href=\"ZxQuery.html\">ZxQuery</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "The *ZxQuery* object itself"
      }
    ],
    "description": {
      "full": "Trigger a component event.",
      "summary": "Trigger a component event.",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 252,
    "codeStart": 258,
    "code": "ZxQuery.prototype.trigger = function (eventPath, eventData) {\n    var event;\n    if (window.CustomEvent) {\n        event = new CustomEvent(eventPath, {detail: eventData});\n    } else {\n        event = document.createEvent('CustomEvent');\n        event.initCustomEvent(eventPath, true, true, eventData);\n    }\n    this.each(function (k, el) {\n        el.dispatchEvent(event);\n    });\n    return this;\n};",
    "ctx": {
      "type": "method",
      "constructor": "ZxQuery",
      "cons": "ZxQuery",
      "name": "trigger",
      "string": "ZxQuery.prototype.trigger()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{string} eventPath Event path",
        "name": "eventPath",
        "description": "Event path",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{function} eventHandler Event handler",
        "name": "eventHandler",
        "description": "Event handler",
        "types": [
          "function"
        ],
        "typesDescription": "<code>function</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{ZxQuery} The *ZxQuery* object itself",
        "types": [
          "ZxQuery"
        ],
        "typesDescription": "<a href=\"ZxQuery.html\">ZxQuery</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "The *ZxQuery* object itself"
      }
    ],
    "description": {
      "full": "Listen once for the given event.",
      "summary": "Listen once for the given event.",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 271,
    "codeStart": 277,
    "code": "ZxQuery.prototype.one = function (eventPath, eventHandler) {\n    var fired = false;\n    this.on(eventPath, function (a, b) {\n        if (fired) return;\n        fired = true;\n        z$(this).off(eventPath, eventHandler);\n        (eventHandler).call(this, a, b);\n    });\n    return this;\n};",
    "ctx": {
      "type": "method",
      "constructor": "ZxQuery",
      "cons": "ZxQuery",
      "name": "one",
      "string": "ZxQuery.prototype.one()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{string} eventPath Event path",
        "name": "eventPath",
        "description": "Event path",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{function} eventHandler Event handler",
        "name": "eventHandler",
        "description": "Event handler",
        "types": [
          "function"
        ],
        "typesDescription": "<code>function</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{ZxQuery} The *ZxQuery* object itself",
        "types": [
          "ZxQuery"
        ],
        "typesDescription": "<a href=\"ZxQuery.html\">ZxQuery</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "The *ZxQuery* object itself"
      }
    ],
    "description": {
      "full": "Listen for the given event.",
      "summary": "Listen for the given event.",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 287,
    "codeStart": 293,
    "code": "ZxQuery.prototype.on = function (eventPath, eventHandler) {\n    var events = eventPath.match(/\\S+/g) || [];\n    this.each(function (k, el) {\n        z$.each(events, function (k, ev) {\n            // TODO: verify if this case apply to all events\n            if (el.tagName.toLowerCase() === 'body')\n                el = document;\n            addEventHandler(el, ev, eventHandler);\n        });\n    });\n    return this;\n};",
    "ctx": {
      "type": "method",
      "constructor": "ZxQuery",
      "cons": "ZxQuery",
      "name": "on",
      "string": "ZxQuery.prototype.on()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{string} eventPath Event path",
        "name": "eventPath",
        "description": "Event path",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{function} eventHandler Event handler",
        "name": "eventHandler",
        "description": "Event handler",
        "types": [
          "function"
        ],
        "typesDescription": "<code>function</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{ZxQuery} The *ZxQuery* object itself",
        "types": [
          "ZxQuery"
        ],
        "typesDescription": "<a href=\"ZxQuery.html\">ZxQuery</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "The *ZxQuery* object itself"
      }
    ],
    "description": {
      "full": "Stop listening for the given event.",
      "summary": "Stop listening for the given event.",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 305,
    "codeStart": 311,
    "code": "ZxQuery.prototype.off = function (eventPath, eventHandler) {\n    var events = eventPath.match(/\\S+/g) || [];\n    this.each(function (k, el) {\n        z$.each(events, function (k, ev) {\n            // TODO: verify if this case apply to all events\n            if (el.tagName.toLowerCase() === 'body')\n                el = document;\n            removeEventHandler(el, ev, eventHandler);\n        });\n    });\n    return this;\n};",
    "ctx": {
      "type": "method",
      "constructor": "ZxQuery",
      "cons": "ZxQuery",
      "name": "off",
      "string": "ZxQuery.prototype.off()"
    }
  },
  {
    "tags": [
      {
        "type": "return",
        "string": "{ZxQuery}",
        "types": [
          "ZxQuery"
        ],
        "typesDescription": "<a href=\"ZxQuery.html\">ZxQuery</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": ""
      }
    ],
    "description": {
      "full": "Un-register all event handlers registered for selected elements.",
      "summary": "Un-register all event handlers registered for selected elements.",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 323,
    "codeStart": 327,
    "code": "ZxQuery.prototype.reset = function () {\n    this.each(function (k, el) {\n        removeAllEventHandlers(el);\n    });\n    return this;\n};",
    "ctx": {
      "type": "method",
      "constructor": "ZxQuery",
      "cons": "ZxQuery",
      "name": "reset",
      "string": "ZxQuery.prototype.reset()"
    }
  },
  {
    "tags": [
      {
        "type": "return",
        "string": "{boolean} *true* if the element is empty, *false* otherwise",
        "types": [
          "boolean"
        ],
        "typesDescription": "<code>boolean</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "*true* if the element is empty, *false* otherwise"
      }
    ],
    "description": {
      "full": "Returns *true* if the element is empty.",
      "summary": "Returns *true* if the element is empty.",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 333,
    "codeStart": 337,
    "code": "ZxQuery.prototype.isEmpty = function () {\n    return (this._selection[0].innerHTML.replace(/\\s/g, '').length === 0);\n};",
    "ctx": {
      "type": "method",
      "constructor": "ZxQuery",
      "cons": "ZxQuery",
      "name": "isEmpty",
      "string": "ZxQuery.prototype.isEmpty()"
    }
  },
  {
    "tags": [
      {
        "type": "return",
        "string": "{{x, y, visible}}",
        "types": [
          {
            "x": [],
            "y": [],
            "visible": []
          }
        ],
        "typesDescription": "{ x: <code>*</code>, y: <code>*</code>, visible: <code>*</code> }",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": ""
      }
    ],
    "description": {
      "full": "Gets coordinates and visibility status of the element.",
      "summary": "Gets coordinates and visibility status of the element.",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 340,
    "codeStart": 345,
    "code": "ZxQuery.prototype.position = function () {\n    if (this._selection[0] != null)\n        return z$.getPosition(this._selection[0]);\n    else // TODO: check this out; should prevent this from happening\n        return { x: -1, y: -1, visible: false };\n};",
    "ctx": {
      "type": "method",
      "constructor": "ZxQuery",
      "cons": "ZxQuery",
      "name": "position",
      "string": "ZxQuery.prototype.position()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{string|JSON} attr The CSS property name or JSON list of properties/values.",
        "name": "attr",
        "description": "The CSS property name or JSON list of properties/values.",
        "types": [
          "string",
          "JSON"
        ],
        "typesDescription": "<code>string</code>|<a href=\"JSON.html\">JSON</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{string|undefined} [val] The attribute value.",
        "name": "[val]",
        "description": "The attribute value.",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>|<code>undefined</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{string|ZxQuery} The *attr* css value when no *val* specified, otherwise the *ZxQuery* object itself",
        "types": [
          "string",
          "ZxQuery"
        ],
        "typesDescription": "<code>string</code>|<a href=\"ZxQuery.html\">ZxQuery</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "The *attr* css value when no *val* specified, otherwise the *ZxQuery* object itself"
      }
    ],
    "description": {
      "full": "Sets or gets the given css property.",
      "summary": "Sets or gets the given css property.",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 352,
    "codeStart": 358,
    "code": "ZxQuery.prototype.css = function (attr, val) {\n    var _t = this;\n    if (typeof attr === 'object') {\n        z$.each(attr, function (i, v) {\n            _t.each(function (k, el) {\n                el.style[i] = v;\n            });\n        });\n    } else if (util.isNoU(val))\n        return this._selection[0].style[attr];\n    else\n        _t.each(function (k, el) {\n            el.style[attr] = val;\n        });\n    return this;\n};",
    "ctx": {
      "type": "method",
      "constructor": "ZxQuery",
      "cons": "ZxQuery",
      "name": "css",
      "string": "ZxQuery.prototype.css()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{string} className The css class name.",
        "name": "className",
        "description": "The css class name.",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{ZxQuery} The *ZxQuery* object itself",
        "types": [
          "ZxQuery"
        ],
        "typesDescription": "<a href=\"ZxQuery.html\">ZxQuery</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "The *ZxQuery* object itself"
      }
    ],
    "description": {
      "full": "Adds the given css class to the element class list.",
      "summary": "Adds the given css class to the element class list.",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 374,
    "codeStart": 379,
    "code": "ZxQuery.prototype.addClass = function (className) {\n    var classes = className.match(/\\S+/g) || [];\n    z$.each(this._selection, function (k, el) {\n        if (el.classList) {\n            z$.each(classes, function (k, cl) {\n                el.classList.add(cl);\n            });\n        } else el.className += ' ' + className;\n    });\n    return this;\n};",
    "ctx": {
      "type": "method",
      "constructor": "ZxQuery",
      "cons": "ZxQuery",
      "name": "addClass",
      "string": "ZxQuery.prototype.addClass()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{string} className The css class name.",
        "name": "className",
        "description": "The css class name.",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{boolean} *true* if the element has the *className* css class, *false* otherwise",
        "types": [
          "boolean"
        ],
        "typesDescription": "<code>boolean</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "*true* if the element has the *className* css class, *false* otherwise"
      }
    ],
    "description": {
      "full": "Returns *true* if the element contains the given css class.",
      "summary": "Returns *true* if the element contains the given css class.",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 390,
    "codeStart": 395,
    "code": "ZxQuery.prototype.hasClass = function (className) {\n    return z$.hasClass(this._selection[0], className);\n};",
    "ctx": {
      "type": "method",
      "constructor": "ZxQuery",
      "cons": "ZxQuery",
      "name": "hasClass",
      "string": "ZxQuery.prototype.hasClass()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{string} className The css class name.",
        "name": "className",
        "description": "The css class name.",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{ZxQuery} The *ZxQuery* object itself",
        "types": [
          "ZxQuery"
        ],
        "typesDescription": "<a href=\"ZxQuery.html\">ZxQuery</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "The *ZxQuery* object itself"
      }
    ],
    "description": {
      "full": "Removes the given css class to the element class list.",
      "summary": "Removes the given css class to the element class list.",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 398,
    "codeStart": 403,
    "code": "ZxQuery.prototype.removeClass = function (className) {\n    var classes = className.match(/\\S+/g) || [];\n    z$.each(this._selection, function (k, el) {\n        if (el.classList) {\n            z$.each(classes, function (k, cl) {\n                el.classList.remove(cl);\n            });\n        } else el.className = el.className.replace(new RegExp('(^|\\\\b)' + className.split(' ').join('|') + '(\\\\b|$)', 'gi'), ' ');\n    });\n    return this;\n};",
    "ctx": {
      "type": "method",
      "constructor": "ZxQuery",
      "cons": "ZxQuery",
      "name": "removeClass",
      "string": "ZxQuery.prototype.removeClass()"
    }
  },
  {
    "tags": [
      {
        "type": "return",
        "string": "{ZxQuery} A new *ZxQuery* object with the previous sibling element.",
        "types": [
          "ZxQuery"
        ],
        "typesDescription": "<a href=\"ZxQuery.html\">ZxQuery</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "A new *ZxQuery* object with the previous sibling element."
      }
    ],
    "description": {
      "full": "Moves to the previous sibling in the DOM.",
      "summary": "Moves to the previous sibling in the DOM.",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 414,
    "codeStart": 418,
    "code": "ZxQuery.prototype.prev = function () {\n    return new ZxQuery(this._selection[0].previousElementSibling);\n};",
    "ctx": {
      "type": "method",
      "constructor": "ZxQuery",
      "cons": "ZxQuery",
      "name": "prev",
      "string": "ZxQuery.prototype.prev()"
    }
  },
  {
    "tags": [
      {
        "type": "return",
        "string": "{ZxQuery} A new *ZxQuery* object with the next sibling element.",
        "types": [
          "ZxQuery"
        ],
        "typesDescription": "<a href=\"ZxQuery.html\">ZxQuery</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "A new *ZxQuery* object with the next sibling element."
      }
    ],
    "description": {
      "full": "Moves to the next sibling in the DOM.",
      "summary": "Moves to the next sibling in the DOM.",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 421,
    "codeStart": 425,
    "code": "ZxQuery.prototype.next = function () {\n    return new ZxQuery(this._selection[0].nextElementSibling);\n};",
    "ctx": {
      "type": "method",
      "constructor": "ZxQuery",
      "cons": "ZxQuery",
      "name": "next",
      "string": "ZxQuery.prototype.next()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{string|undefined} [htmlText] HTML markup text.",
        "name": "[htmlText]",
        "description": "HTML markup text.",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>|<code>undefined</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{ZxQuery|string}",
        "types": [
          "ZxQuery",
          "string"
        ],
        "typesDescription": "<a href=\"ZxQuery.html\">ZxQuery</a>|<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": ""
      }
    ],
    "description": {
      "full": "Gets or sets the HTML markup.",
      "summary": "Gets or sets the HTML markup.",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 428,
    "codeStart": 433,
    "code": "ZxQuery.prototype.html = function (htmlText) {\n    if (util.isNoU(htmlText))\n        return this._selection[0].innerHTML;\n    this.each(function (k, el) {\n        el.innerHTML = htmlText;\n    });\n    return this;\n};",
    "ctx": {
      "type": "method",
      "constructor": "ZxQuery",
      "cons": "ZxQuery",
      "name": "html",
      "string": "ZxQuery.prototype.html()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{boolean|undefined} [check] Value to assign to the 'checked' attribute.",
        "name": "[check]",
        "description": "Value to assign to the 'checked' attribute.",
        "types": [
          "boolean"
        ],
        "typesDescription": "<code>boolean</code>|<code>undefined</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{ZxQuery|boolean}",
        "types": [
          "ZxQuery",
          "boolean"
        ],
        "typesDescription": "<a href=\"ZxQuery.html\">ZxQuery</a>|<code>boolean</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": ""
      }
    ],
    "description": {
      "full": "Gets or sets the checked attribute.",
      "summary": "Gets or sets the checked attribute.",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 441,
    "codeStart": 446,
    "code": "ZxQuery.prototype.checked = function(check) {\n    if (util.isNoU(check)) {\n        var checked = this._selection[0].checked;\n        return (checked != null && checked != 'false' && (checked || checked == 'checked'));\n    }\n    this.each(function (k, el) {\n        el.checked = check;\n    });\n    return this;\n\n};",
    "ctx": {
      "type": "method",
      "constructor": "ZxQuery",
      "cons": "ZxQuery",
      "name": "checked",
      "string": "ZxQuery.prototype.checked()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{string|undefined} [value] Value to assign to the 'value' attribute.",
        "name": "[value]",
        "description": "Value to assign to the 'value' attribute.",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>|<code>undefined</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{ZxQuery|string}",
        "types": [
          "ZxQuery",
          "string"
        ],
        "typesDescription": "<a href=\"ZxQuery.html\">ZxQuery</a>|<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": ""
      }
    ],
    "description": {
      "full": "Gets or sets the 'value' attribute.",
      "summary": "Gets or sets the 'value' attribute.",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 457,
    "codeStart": 462,
    "code": "ZxQuery.prototype.value = function(value) {\n    if (util.isNoU(value))\n        return this._selection[0].value;\n    this.each(function (k, el) {\n        el.value = value;\n    });\n    return this;\n\n};",
    "ctx": {
      "type": "method",
      "constructor": "ZxQuery",
      "cons": "ZxQuery",
      "name": "value",
      "string": "ZxQuery.prototype.value()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{Object|ZxQuery|Array<Node>|Node|NodeList|string} el Element to append.",
        "name": "el",
        "description": "Element to append.",
        "types": [
          "Object",
          "ZxQuery",
          "Array.<Node>",
          "Node",
          "NodeList",
          "string"
        ],
        "typesDescription": "<code>Object</code>|<a href=\"ZxQuery.html\">ZxQuery</a>|<code>Array</code>.&lt;<code>Node</code>&gt;|<code>Node</code>|<code>NodeList</code>|<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{ZxQuery} The *ZxQuery* object itself",
        "types": [
          "ZxQuery"
        ],
        "typesDescription": "<a href=\"ZxQuery.html\">ZxQuery</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "The *ZxQuery* object itself"
      }
    ],
    "description": {
      "full": "Appends the given element/markup to the current element.",
      "summary": "Appends the given element/markup to the current element.",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 471,
    "codeStart": 476,
    "code": "ZxQuery.prototype.append = function (el) {\n    if (typeof el === 'string')\n        this._selection[0].innerHTML += el;\n    else\n        this._selection[0].appendChild(el);\n    return this;\n};",
    "ctx": {
      "type": "method",
      "constructor": "ZxQuery",
      "cons": "ZxQuery",
      "name": "append",
      "string": "ZxQuery.prototype.append()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "index Position where to insert `el` Element.",
        "name": "index",
        "description": "Position where to insert `el` Element.",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false
      },
      {
        "type": "param",
        "string": "{Object|ZxQuery|Array<Node>|Node|NodeList} el Element to insert.",
        "name": "el",
        "description": "Element to insert.",
        "types": [
          "Object",
          "ZxQuery",
          "Array.<Node>",
          "Node",
          "NodeList"
        ],
        "typesDescription": "<code>Object</code>|<a href=\"ZxQuery.html\">ZxQuery</a>|<code>Array</code>.&lt;<code>Node</code>&gt;|<code>Node</code>|<code>NodeList</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{ZxQuery} The *ZxQuery* object itself",
        "types": [
          "ZxQuery"
        ],
        "typesDescription": "<a href=\"ZxQuery.html\">ZxQuery</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "The *ZxQuery* object itself"
      }
    ],
    "description": {
      "full": "Insert the given child element before the one at the\nspecified index.",
      "summary": "Insert the given child element before the one at the\nspecified index.",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 483,
    "codeStart": 491,
    "code": "ZxQuery.prototype.insert = function (index, el) {\n    var target = this.children().get(index);\n    if (target !== null)\n        this._selection[0].insertBefore(el, target);\n    else\n        this._selection[0].appendChild(el);\n    return this;\n};",
    "ctx": {
      "type": "method",
      "constructor": "ZxQuery",
      "cons": "ZxQuery",
      "name": "insert",
      "string": "ZxQuery.prototype.insert()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{Object|ZxQuery|Array<Node>|Node|NodeList|string} el Element to append.",
        "name": "el",
        "description": "Element to append.",
        "types": [
          "Object",
          "ZxQuery",
          "Array.<Node>",
          "Node",
          "NodeList",
          "string"
        ],
        "typesDescription": "<code>Object</code>|<a href=\"ZxQuery.html\">ZxQuery</a>|<code>Array</code>.&lt;<code>Node</code>&gt;|<code>Node</code>|<code>NodeList</code>|<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{ZxQuery} The *ZxQuery* object itself",
        "types": [
          "ZxQuery"
        ],
        "typesDescription": "<a href=\"ZxQuery.html\">ZxQuery</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "The *ZxQuery* object itself"
      }
    ],
    "description": {
      "full": "Prepends the given element/markup to the current element.",
      "summary": "Prepends the given element/markup to the current element.",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 499,
    "codeStart": 504,
    "code": "ZxQuery.prototype.prepend = function (el) {\n    if (typeof el === 'string')\n        this._selection[0].innerHTML = el + this._selection[0].innerHTML;\n    else\n        this._selection[0].insertBefore(el, this._selection[0].firstElementChild);\n    return this;\n};",
    "ctx": {
      "type": "method",
      "constructor": "ZxQuery",
      "cons": "ZxQuery",
      "name": "prepend",
      "string": "ZxQuery.prototype.prepend()"
    }
  },
  {
    "tags": [
      {
        "type": "return",
        "string": "{ZxQuery}",
        "types": [
          "ZxQuery"
        ],
        "typesDescription": "<a href=\"ZxQuery.html\">ZxQuery</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": ""
      }
    ],
    "description": {
      "full": "Re-attach element to its parent.",
      "summary": "Re-attach element to its parent.",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 511,
    "codeStart": 515,
    "code": "ZxQuery.prototype.attach = function () {\n    var el = this._selection[0];\n    if (el.parentNode == null && el.__zuix_oldParent != null) {\n        z$(el.__zuix_oldParent).insert(el.__zuix_oldIndex, el);\n        el.__zuix_oldParent = null;\n        delete el.__zuix_oldParent;\n        delete el.__zuix_oldIndex;\n    }\n    return this;\n};",
    "ctx": {
      "type": "method",
      "constructor": "ZxQuery",
      "cons": "ZxQuery",
      "name": "attach",
      "string": "ZxQuery.prototype.attach()"
    }
  },
  {
    "tags": [
      {
        "type": "return",
        "string": "{ZxQuery}",
        "types": [
          "ZxQuery"
        ],
        "typesDescription": "<a href=\"ZxQuery.html\">ZxQuery</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": ""
      }
    ],
    "description": {
      "full": "Detach element from its parent.",
      "summary": "Detach element from its parent.",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 525,
    "codeStart": 529,
    "code": "ZxQuery.prototype.detach = function () {\n    var el = this._selection[0];\n    var parent = el.parentNode;\n    if (parent != null) {\n        el.__zuix_oldParent = parent;\n        el.__zuix_oldIndex = Array.prototype.indexOf.call(parent.children, el);\n        parent.removeChild(el);\n        _log.t('Detached from parent', parent, el);\n    }\n    return this;\n};",
    "ctx": {
      "type": "method",
      "constructor": "ZxQuery",
      "cons": "ZxQuery",
      "name": "detach",
      "string": "ZxQuery.prototype.detach()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{string|undefined} [mode] The display value.",
        "name": "[mode]",
        "description": "The display value.",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>|<code>undefined</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{string|ZxQuery} The *display* css value when no *mode* specified, otherwise the *ZxQuery* object itself",
        "types": [
          "string",
          "ZxQuery"
        ],
        "typesDescription": "<code>string</code>|<a href=\"ZxQuery.html\">ZxQuery</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "The *display* css value when no *mode* specified, otherwise the *ZxQuery* object itself"
      }
    ],
    "description": {
      "full": "Gets or sets the css `display` property.",
      "summary": "Gets or sets the css `display` property.",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 540,
    "codeStart": 545,
    "code": "ZxQuery.prototype.display = function (mode) {\n    if (util.isNoU(mode))\n        return this._selection[0].style.display;\n    z$.each(this._selection, function (k, el) {\n        el.style.display = mode;\n    });\n    return this;\n};",
    "ctx": {
      "type": "method",
      "constructor": "ZxQuery",
      "cons": "ZxQuery",
      "name": "display",
      "string": "ZxQuery.prototype.display()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{string|undefined} [mode] The visibility value.",
        "name": "[mode]",
        "description": "The visibility value.",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>|<code>undefined</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{string|ZxQuery} The *visibility* css value when no *mode* specified, otherwise the *ZxQuery* object itself",
        "types": [
          "string",
          "ZxQuery"
        ],
        "typesDescription": "<code>string</code>|<a href=\"ZxQuery.html\">ZxQuery</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "The *visibility* css value when no *mode* specified, otherwise the *ZxQuery* object itself"
      }
    ],
    "description": {
      "full": "Gets or sets the css `visibility` property.",
      "summary": "Gets or sets the css `visibility` property.",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 553,
    "codeStart": 558,
    "code": "ZxQuery.prototype.visibility = function (mode) {\n    if (util.isNoU(mode))\n        return this._selection[0].style.visibility;\n    z$.each(this._selection, function (k, el) {\n        el.style.visibility = mode;\n    });\n    return this;\n};",
    "ctx": {
      "type": "method",
      "constructor": "ZxQuery",
      "cons": "ZxQuery",
      "name": "visibility",
      "string": "ZxQuery.prototype.visibility()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{string} [mode] Set the display mode to be used to show element (eg. block, inline, etc..)",
        "name": "[mode]",
        "description": "Set the display mode to be used to show element (eg. block, inline, etc..)",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{ZxQuery} The *ZxQuery* object itself",
        "types": [
          "ZxQuery"
        ],
        "typesDescription": "<a href=\"ZxQuery.html\">ZxQuery</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "The *ZxQuery* object itself"
      }
    ],
    "description": {
      "full": "Sets the css `display` property to ''.",
      "summary": "Sets the css `display` property to ''.",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 566,
    "codeStart": 571,
    "code": "ZxQuery.prototype.show = function (mode) {\n    return this.display(mode == null ? '' : mode);\n};",
    "ctx": {
      "type": "method",
      "constructor": "ZxQuery",
      "cons": "ZxQuery",
      "name": "show",
      "string": "ZxQuery.prototype.show()"
    }
  },
  {
    "tags": [
      {
        "type": "return",
        "string": "{ZxQuery} The *ZxQuery* object itself",
        "types": [
          "ZxQuery"
        ],
        "typesDescription": "<a href=\"ZxQuery.html\">ZxQuery</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "The *ZxQuery* object itself"
      }
    ],
    "description": {
      "full": "Sets the css `display` property to 'none'.",
      "summary": "Sets the css `display` property to 'none'.",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 574,
    "codeStart": 578,
    "code": "ZxQuery.prototype.hide = function () {\n    return this.display('none');\n};\n\n// --- ZxQuery factory members --- //",
    "ctx": {
      "type": "method",
      "constructor": "ZxQuery",
      "cons": "ZxQuery",
      "name": "hide",
      "string": "ZxQuery.prototype.hide()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "[what] {Object|ZxQuery|Array<Node>|Node|NodeList|string|undefined}",
        "name": "[what]",
        "description": "{Object|ZxQuery|Array<Node>|Node|NodeList|string|undefined}",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false
      },
      {
        "type": "returns",
        "string": "{ZxQuery}",
        "types": [
          "ZxQuery"
        ],
        "typesDescription": "<a href=\"ZxQuery.html\">ZxQuery</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": ""
      }
    ],
    "description": {
      "full": "Exported ZxQuery interface.",
      "summary": "Exported ZxQuery interface.",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 584,
    "codeStart": 590,
    "code": "var z$ = function (what) {\n    return new ZxQuery(what);\n};\nz$.find = function (filter) {\n    return z$().find(filter);\n};",
    "ctx": {
      "type": "function",
      "name": "z$",
      "string": "z$()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{Array<Object>|JSON} items Enumerable objects collection.",
        "name": "items",
        "description": "Enumerable objects collection.",
        "types": [
          "Array.<Object>",
          "JSON"
        ],
        "typesDescription": "<code>Array</code>.&lt;<code>Object</code>&gt;|<a href=\"JSON.html\">JSON</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{ZxQuery~iterationCallback} iterationCallback The callback *fn* to call at each iteration",
        "name": "iterationCallback",
        "description": "The callback *fn* to call at each iteration",
        "types": [],
        "typesDescription": "<code>?</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{z$} `this`.",
        "types": [
          "z$"
        ],
        "typesDescription": "<a href=\"z%24.html\">z$</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "`this`."
      }
    ],
    "description": {
      "full": "Iterate through all objects in the given `items` collection.\nThe context object *this*, passed to the\n*iterationCallback*`(index, item)`, will be the\nobject corresponding the current iteration and\nthe `index` passed to the callback will be the iteration count.\n\nIf the callback returns *false*, the iteration loop will interrupt.",
      "summary": "Iterate through all objects in the given `items` collection.\nThe context object *this*, passed to the\n*iterationCallback*`(index, item)`, will be the\nobject corresponding the current iteration and\nthe `index` passed to the callback will be the iteration count.",
      "body": "If the callback returns *false*, the iteration loop will interrupt."
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 596,
    "codeStart": 609,
    "code": "z$.each = function (items, iterationCallback) {\n    var len = (items == null ? 0 : Object.keys(items).length);\n    if (len > 0) {\n        var count = 0;\n        for (var i in items) {\n            var item = items[i];\n            if (item instanceof Element)\n                item = z$(item);\n            if (iterationCallback.call(item, i, items[i]) === false)\n                break;\n            count++;\n            if (count >= len)\n                break;\n        }\n    }\n    return this;\n};\nz$.ajax = function (opt) {\n    var url;\n    if (!util.isNoU(opt) && !util.isNoU(opt.url))\n        url = opt.url;\n    else\n        url = opt;\n    var xhr = new XMLHttpRequest();\n    xhr.open('GET', url);\n    xhr.onload = function () {\n        if (xhr.status === 200) {\n            if (util.isFunction(opt.success)) opt.success(xhr.responseText);\n        } else {\n            if (util.isFunction(opt.error)) opt.error(xhr);\n        }\n        if (util.isFunction(opt.then)) opt.then(xhr);\n    };\n    xhr.send();\n    return this;\n};\nz$.hasClass = function(el, className) {\n    var classes = className.match(/\\S+/g) || [];\n    var success = false;\n    z$.each(classes, function (k, cl) {\n        if (el.classList)\n            success = el.classList.contains(cl);\n        else\n            success = (new RegExp('(^| )' + cl + '( |$)', 'gi').test(el.className));\n        if (success) return false;\n    });\n    return success;\n};\nz$.classExists = function (className) {\n    var classes = className.match(/\\S+/g) || [];\n    var success = false;\n    z$.each(classes, function (k, cl) {\n        // Perform global style check\n        var docStyles = document.styleSheets;\n        if (docStyles != null) {\n            for (var sx = 0; sx < docStyles.length; sx++) {\n                var classes = docStyles[sx].rules || docStyles[sx].cssRules;\n                if (classes != null) {\n                    for (var cx = 0; cx < classes.length; cx++) {\n                        if (classes[cx].selectorText === cl) {\n                            success = true;\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n    });\n    return success;\n};\nz$.wrapElement = function (containerTag, element) {\n    //$(element).wrap($('<'+containerTag+'/>'));\n    //return element;",
    "ctx": {
      "type": "method",
      "receiver": "z$",
      "name": "each",
      "string": "z$.each()"
    }
  },
  {
    "tags": [
      {
        "type": "type",
        "string": "Element",
        "types": [
          "lemen"
        ],
        "typesDescription": "<a href=\"lemen.html\">lemen</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 682,
    "codeStart": 683,
    "code": "var container = document.createElement(containerTag);\nif (typeof element === 'string')\n    container.innerHTML = element;\nelse\n// TODO: test this, it may not work\n    container.appendChild(element);\nreturn container;\n};\nz$.wrapCss = function (wrapperRule, css) {\nvar wrapReX = /((.*){([^{}]|((.*){([^}]+)[}]))*})/g;\nvar wrappedCss = '';\nvar ruleMatch;\ndo {\n    ruleMatch = wrapReX.exec(css);\n    if (ruleMatch && ruleMatch.length > 1) {\n        var ruleParts = ruleMatch[2];\n        if (ruleParts != null && ruleParts.length > 0) {\n            var classes = ruleParts.split(',');\n            z$.each(classes, function (k, v) {\n                if (v.replace(' ', '') === '.') {\n                    // a single `.` means 'self' (the container itself)\n                    // so we just add the wrapperRule\n                    wrappedCss += '\\n' + wrapperRule + ' '\n                } else if (v.trim()[0] === '@') {\n                    // leave it as is if it's an animation rule\n                    wrappedCss += v + ' ';\n                } else {\n                    // wrap the class name (v)\n                    wrappedCss += '\\n' + wrapperRule + '\\n' + v + ' ';\n                }\n                if (k < classes.length - 1)\n                    wrappedCss += ', ';\n            });\n            wrappedCss += ruleMatch[1].substring(ruleMatch[2].length) + '\\n';\n        } else {\n            _log.w('z$.wrapCss was unable to parse rule.', ruleParts, ruleMatch);\n        }\n    }\n} while (ruleMatch);\nif (wrappedCss !== '') {\n    css = wrappedCss;\n}\nreturn css;\n};\nz$.appendCss = function (css, target, cssId) {\nvar style = null, head;\nif (typeof css === 'string') {\n    // output css\n    head = document.head || document.getElementsByTagName('head')[0];\n    style = document.createElement('style');\n    style.type = 'text/css';\n    style.id = cssId;\n    if (style.styleSheet)\n        style.styleSheet.cssText = css;\n    else\n        style.appendChild(document.createTextNode(css));\n} else if (css instanceof Element) style = css;\n// remove previous style node\nif (!util.isNoU(target))\n    head.removeChild(target);\nif (!util.isNoU(style))\n    head.appendChild(style);\nreturn style;\n};\nz$.replaceBraces = function (html, callback) {\nvar outHtml = '', matched = 0, currentIndex = 0;\nvar tags = new RegExp(/[^{}]+(?=})/g),\n    result;\nwhile (result = tags.exec(html)) {\n    var value = '{'+result[0]+'}';\n    if (typeof callback === 'function') {\n        var r = callback(result[0]);\n        if (!util.isNoU(r)) {\n            value = r;\n            matched++;\n        }\n    }\n    outHtml += html.substr(currentIndex, result.index-currentIndex-1)+value;\n    currentIndex = result.index+result[0].length+1;\n}\nif (matched > 0) {\n    outHtml += html.substr(currentIndex);\n    return outHtml;\n}\n};\nz$.getClosest = function (elem, selector) {\n// Get closest match\nfor (; elem && elem !== document; elem = elem.parentNode) {\n    if (elem.matches(selector)) return elem;\n}\nreturn null;\n};\nz$.getPosition = function (el) {\nvar visible = z$.isInView(el);\nvar x = 0, y = 0;\nwhile (el) {\n    if (el.tagName == \"BODY\") {\n        // deal with browser quirks with body/window/document and page scroll\n        var scrollX = el.scrollLeft || document.documentElement.scrollLeft;\n        var scrollY = el.scrollTop || document.documentElement.scrollTop;\n        x += (el.offsetLeft - scrollX + el.clientLeft);\n        y += (el.offsetTop - scrollY + el.clientTop);\n    } else {\n        // for all other non-BODY elements\n        x += (el.offsetLeft - el.scrollLeft + el.clientLeft);\n        y += (el.offsetTop - el.scrollTop + el.clientTop);\n    }\n    el = el.offsetParent;\n}\nreturn {\n    x: x,\n    y: y,\n    visible: visible\n};\n};\nz$.isInView = function (el, tolerance) {\nif (el.offsetParent === null)\n    return false;\nvar rect = el.getBoundingClientRect();\nvar area = {\n    width: (window.innerWidth || document.documentElement.clientWidth)",
    "ctx": {
      "type": "declaration",
      "name": "container",
      "value": "document.createElement(containerTag)",
      "string": "container"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "or $(window).width()",
      "summary": "or $(window).width()",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 803,
    "codeStart": 805,
    "code": "height: (window.innerHeight || document.documentElement.clientHeight)",
    "ctx": {
      "type": "property",
      "name": "height",
      "value": "(window.innerHeight || document.documentElement.clientHeight)",
      "string": "height"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "or $(window).height()",
      "summary": "or $(window).height()",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 804,
    "codeStart": 805,
    "code": "};\nvar xt = 0; var yt = 0;\nif (!isNaN(tolerance)) {\n    xt = (area.width * tolerance) - area.width;\n    yt = (area.height * tolerance) - area.height;\n}\nreturn rect.bottom > -yt && rect.right > -xt\n    && rect.left < area.width + xt\n    && rect.top < area.height + yt;\n};\nz$.scrollTo = function(el, targetY, duration) {\nif (targetY === 0 || targetY == null)\n    return;\nif (duration == null) duration = 500;\nvar scrollTop = el.scrollTop+targetY - 56;\nvar scrollOffset = el.scrollTop-scrollTop;\nel.firstElementChild.style.transition = 'transform '+duration+'ms ease';\nif (typeof el.firstElementChild.style.WebkitTransform !== 'undefined')\n    el.firstElementChild.style.WebkitTransform = \"translate(0, \" + (scrollOffset) + \"px)\";\nelse if (typeof el.firstElementChild.style.MozTransform !== 'undefined')\n    el.firstElementChild.style.MozTransform= \"translate(0, \" + (scrollOffset) + \"px)\";\nelse\n    el.firstElementChild.style.transform = \"translate(0, \" + (scrollOffset) + \"px)\";\nwindow.setTimeout(function () {\n    // TODO: should backup and restore old value\n    if (typeof el.firstElementChild.style.WebkitTransform !== 'undefined')\n        el.firstElementChild.style.WebkitTransform = \"\";\n    else if (typeof el.firstElementChild.style.MozTransform !== 'undefined')\n        el.firstElementChild.style.MozTransform= \"\";\n    else\n        el.firstElementChild.style.transform = \"\";\n    el.firstElementChild.style.transition = '';\n    el.scrollTop = scrollTop;\n}, duration);\n};\n\nz$.ZxQuery = ZxQuery;\n\n// Element.matches() polyfill\nif (!Element.prototype.matches) {\nElement.prototype.matches =\n    Element.prototype.matchesSelector ||\n    Element.prototype.mozMatchesSelector ||\n    Element.prototype.msMatchesSelector ||\n    Element.prototype.oMatchesSelector ||\n    Element.prototype.webkitMatchesSelector ||\n    function (s) {\n        var matches = (this.document || this.ownerDocument).querySelectorAll(s),\n            i = matches.length;\n        while (--i >= 0 && matches.item(i) !== this) {\n        }\n        return i > -1;\n    };\n}\n// window.CustomEvent polyfill for IE>=9\n(function () {\nif ( typeof window.CustomEvent === \"function\" ) return false;\nfunction CustomEvent ( event, params ) {\n    params = params || { bubbles: false, cancelable: false, detail: undefined };\n    var evt = document.createEvent( 'CustomEvent' );\n    evt.initCustomEvent( event, params.bubbles, params.cancelable, params.detail );\n    return evt;\n}\nCustomEvent.prototype = window.Event.prototype;\nwindow.CustomEvent = CustomEvent;\n})();\n// String.hashCode extension\nString.prototype.hashCode = function() {\nvar hash = 0, i, chr;\nif (this.length === 0) return hash;\nfor (i = 0; i < this.length; i++) {\n    chr   = this.charCodeAt(i);\n    hash  = ((hash << 5) - hash) + chr;\n    hash |= 0; // Convert to 32bit integer\n}\nreturn hash;\n};\n\nmodule.exports =  z$;",
    "ctx": false
  }
]
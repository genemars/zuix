[
  {
    "tags": [],
    "description": {
      "full": "Copyright 2015-2017 G-Labs. All Rights Reserved.\n        https://genielabs.github.io/zuix\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.",
      "summary": "Copyright 2015-2017 G-Labs. All Rights Reserved.\n        https://genielabs.github.io/zuix",
      "body": "Licensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License."
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 1,
    "codeStart": 17
  },
  {
    "tags": [
      {
        "type": "author",
        "string": "Generoso Martello <generoso@martello.com>"
      }
    ],
    "description": {
      "full": "ZUIX, Javascript library for component-based development.\n       https://genielabs.github.io/zuix",
      "summary": "ZUIX, Javascript library for component-based development.\n       https://genielabs.github.io/zuix",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 18,
    "codeStart": 27,
    "code": "\"use strict\";\n\nvar _log =\n    require('../helpers/Logger')('Zuix.js');\nvar util =\n    require('../helpers/Util');\nvar z$ =\n    require('../helpers/ZxQuery');\nvar TaskQueue =\n    require('../helpers/TaskQueue');\nvar ComponentContext =\n    require('./ComponentContext');\nvar ContextController =\n    require('./ContextController');\nvar _componentizer =\n    require('./Componentizer')();\n\nrequire('./ComponentCache');\nrequire('./ContextOptions');",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "const",
        "string": ""
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 47,
    "codeStart": 50,
    "code": "var ZUIX_FIELD_ATTRIBUTE = 'data-ui-field';",
    "ctx": {
      "type": "declaration",
      "name": "ZUIX_FIELD_ATTRIBUTE",
      "value": "'data-ui-field'",
      "string": "ZUIX_FIELD_ATTRIBUTE"
    }
  },
  {
    "tags": [
      {
        "type": "private",
        "string": "",
        "visibility": "private"
      },
      {
        "type": "type",
        "string": "{!Array.<ComponentCache>}",
        "types": [
          "Array.<ComponentCache>"
        ],
        "typesDescription": "!<code>Array</code>.&lt;<a href=\"ComponentCache.html\">ComponentCache</a>&gt;",
        "optional": false,
        "nullable": false,
        "nonNullable": true,
        "variable": false
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 52,
    "codeStart": 56,
    "code": "var _componentCache = [];",
    "ctx": {
      "type": "declaration",
      "name": "_componentCache",
      "value": "[]",
      "string": "_componentCache"
    }
  },
  {
    "tags": [
      {
        "type": "private",
        "string": "",
        "visibility": "private"
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 58,
    "codeStart": 59,
    "code": "var _contextSeqNum = 0;",
    "ctx": {
      "type": "declaration",
      "name": "_contextSeqNum",
      "value": "0",
      "string": "_contextSeqNum"
    }
  },
  {
    "tags": [
      {
        "type": "private",
        "string": "",
        "visibility": "private"
      },
      {
        "type": "type",
        "string": "{!Array.<ComponentContext>}",
        "types": [
          "Array.<ComponentContext>"
        ],
        "typesDescription": "!<code>Array</code>.&lt;<a href=\"ComponentContext.html\">ComponentContext</a>&gt;",
        "optional": false,
        "nullable": false,
        "nonNullable": true,
        "variable": false
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 60,
    "codeStart": 64,
    "code": "var _contextRoot = [];",
    "ctx": {
      "type": "declaration",
      "name": "_contextRoot",
      "value": "[]",
      "string": "_contextRoot"
    }
  },
  {
    "tags": [
      {
        "type": "private",
        "string": "",
        "visibility": "private"
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 66,
    "codeStart": 67,
    "code": "var resourceLoadTask = [];",
    "ctx": {
      "type": "declaration",
      "name": "resourceLoadTask",
      "value": "[]",
      "string": "resourceLoadTask"
    }
  },
  {
    "tags": [
      {
        "type": "private",
        "string": "",
        "visibility": "private"
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 69,
    "codeStart": 70,
    "code": "var _hooksCallbacks = [];",
    "ctx": {
      "type": "declaration",
      "name": "_hooksCallbacks",
      "value": "[]",
      "string": "_hooksCallbacks"
    }
  },
  {
    "tags": [
      {
        "type": "private",
        "string": "",
        "visibility": "private"
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 72,
    "codeStart": 73,
    "code": "var _globalHandlers = {};",
    "ctx": {
      "type": "declaration",
      "name": "_globalHandlers",
      "value": "{}",
      "string": "_globalHandlers"
    }
  },
  {
    "tags": [
      {
        "type": "private",
        "string": "",
        "visibility": "private"
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 75,
    "codeStart": 76,
    "code": "var _enableHttpCaching = true;",
    "ctx": {
      "type": "declaration",
      "name": "_enableHttpCaching",
      "value": "true",
      "string": "_enableHttpCaching"
    }
  },
  {
    "tags": [
      {
        "type": "private",
        "string": "*",
        "visibility": "private"
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 78,
    "codeStart": 79,
    "code": "var _componentTask = [];",
    "ctx": {
      "type": "declaration",
      "name": "_componentTask",
      "value": "[]",
      "string": "_componentTask"
    }
  },
  {
    "tags": [
      {
        "type": "private",
        "string": "*",
        "visibility": "private"
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 80,
    "codeStart": 81,
    "code": "var taskQueue = function(tid) {\n    if (util.isNoU(_componentTask[tid])) {\n        _componentTask[tid] = new TaskQueue(function (tq, eventPath, eventValue) {\n            trigger(tq, eventPath, eventValue);\n        });\n    }\n    return _componentTask[tid];\n};",
    "ctx": {
      "type": "function",
      "name": "taskQueue",
      "string": "taskQueue()"
    }
  },
  {
    "tags": [
      {
        "type": "private",
        "string": "*",
        "visibility": "private"
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 89,
    "codeStart": 90,
    "code": "var _pendingResourceTask = {};",
    "ctx": {
      "type": "declaration",
      "name": "_pendingResourceTask",
      "value": "{}",
      "string": "_pendingResourceTask"
    }
  },
  {
    "tags": [
      {
        "type": "class",
        "string": "Zuix"
      },
      {
        "type": "constructor",
        "string": ""
      },
      {
        "type": "return",
        "string": "{Zuix}",
        "types": [
          "Zuix"
        ],
        "typesDescription": "<a href=\"Zuix.html\">Zuix</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": ""
      }
    ],
    "description": {
      "full": "ZUIX, Javascript library for component-based development.",
      "summary": "ZUIX, Javascript library for component-based development.",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": true,
    "isClass": true,
    "isEvent": false,
    "ignore": false,
    "line": 92,
    "codeStart": 99,
    "code": "function Zuix() {\n    _componentizer.setHost(this);",
    "ctx": {
      "type": "constructor",
      "name": "Zuix",
      "string": "Zuix()"
    }
  },
  {
    "tags": [
      {
        "type": "private",
        "string": "",
        "visibility": "private"
      },
      {
        "type": "type",
        "string": "{!Array.<ZxQuery>}",
        "types": [
          "Array.<ZxQuery>"
        ],
        "typesDescription": "!<code>Array</code>.&lt;<a href=\"ZxQuery.html\">ZxQuery</a>&gt;",
        "optional": false,
        "nullable": false,
        "nonNullable": true,
        "variable": false
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 101,
    "codeStart": 105,
    "code": "this._fieldCache = [];\nreturn this;\n}",
    "ctx": {
      "type": "property",
      "receiver": "this",
      "name": "_fieldCache",
      "value": "[]",
      "string": "this._fieldCache"
    }
  },
  {
    "tags": [
      {
        "type": "private",
        "string": "",
        "visibility": "private"
      },
      {
        "type": "param",
        "string": "handler {ContextControllerHandler}",
        "name": "handler",
        "description": "{ContextControllerHandler}",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false
      },
      {
        "type": "return",
        "string": "{ContextControllerHandler}",
        "types": [
          "ContextControllerHandler"
        ],
        "typesDescription": "<a href=\"ContextControllerHandler.html\">ContextControllerHandler</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": ""
      }
    ],
    "description": {
      "full": "Initializes a controller ```handler```.",
      "summary": "Initializes a controller ```handler```.",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 109,
    "codeStart": 116,
    "code": "function controller(handler) {\n    if (typeof handler['for'] !== 'function')\n        handler['for'] = function (componentId) {\n            _globalHandlers[componentId] = handler;\n            return handler;\n        };\n    return handler;\n}",
    "ctx": {
      "type": "function",
      "name": "controller",
      "string": "controller()"
    }
  },
  {
    "tags": [
      {
        "type": "private",
        "string": "",
        "visibility": "private"
      },
      {
        "type": "param",
        "string": "{!string} fieldName Value to match in the `data-ui-field` attribute.",
        "name": "fieldName",
        "description": "Value to match in the `data-ui-field` attribute.",
        "types": [
          "string"
        ],
        "typesDescription": "!<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": true,
        "variable": false
      },
      {
        "type": "param",
        "string": "{!Element|!ZxQuery} [container] Starting DOM element for this search (**default:** *document*)",
        "name": "[container]",
        "description": "Starting DOM element for this search (**default:** *document*)",
        "types": [
          "Element",
          "ZxQuery"
        ],
        "typesDescription": "!<code>Element</code>|<a href=\"ZxQuery.html\">ZxQuery</a>",
        "optional": true,
        "nullable": false,
        "nonNullable": true,
        "variable": false
      },
      {
        "type": "param",
        "string": "{object} [context] The context",
        "name": "[context]",
        "description": "The context",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{ZxQuery}",
        "types": [
          "ZxQuery"
        ],
        "typesDescription": "<a href=\"ZxQuery.html\">ZxQuery</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": ""
      }
    ],
    "description": {
      "full": "Gets elements with `data-ui-field`\nattribute matching the given `fieldName`.",
      "summary": "Gets elements with `data-ui-field`\nattribute matching the given `fieldName`.",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 125,
    "codeStart": 135,
    "code": "function field(fieldName, container, context) {\n    if (util.isNoU(context))\n        context = this;\n    if (context._fieldCache == null)\n        context._fieldCache = {};\n\n    var el = null;\n    if (typeof context._fieldCache[fieldName] === 'undefined') {\n        el = z$(container).find('[' + ZUIX_FIELD_ATTRIBUTE + '=\"' + fieldName + '\"]');\n        if (el != null)\n            context._fieldCache[fieldName] = el;\n    } else el = context._fieldCache[fieldName];\n\n    return el;\n}",
    "ctx": {
      "type": "function",
      "name": "field",
      "string": "field()"
    }
  },
  {
    "tags": [
      {
        "type": "private",
        "string": "",
        "visibility": "private"
      },
      {
        "type": "param",
        "string": "{!string} componentId The id/name of the component we want to load.",
        "name": "componentId",
        "description": "The id/name of the component we want to load.",
        "types": [
          "string"
        ],
        "typesDescription": "!<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": true,
        "variable": false
      },
      {
        "type": "param",
        "string": "{ContextOptions|undefined} [options] context options used to initialize the loaded component",
        "name": "[options]",
        "description": "context options used to initialize the loaded component",
        "types": [
          "ContextOptions"
        ],
        "typesDescription": "<a href=\"ContextOptions.html\">ContextOptions</a>|<code>undefined</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{ComponentContext}",
        "types": [
          "ComponentContext"
        ],
        "typesDescription": "<a href=\"ComponentContext.html\">ComponentContext</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": ""
      }
    ],
    "description": {
      "full": "Loads a component with the given options.",
      "summary": "Loads a component with the given options.",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 151,
    "codeStart": 159,
    "code": "function load(componentId, options) {\n    // TODO: throw error on argument mismatch\n    // TODO: prevent load loops when including recursively a component",
    "ctx": {
      "type": "function",
      "name": "load",
      "string": "load()"
    }
  },
  {
    "tags": [
      {
        "type": "type",
        "string": "{ComponentContext}",
        "types": [
          "ComponentContext"
        ],
        "typesDescription": "<a href=\"ComponentContext.html\">ComponentContext</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 163,
    "codeStart": 164,
    "code": "var ctx = null;\nif (!util.isNoU(options)) {\n    // the `componentId` property is mandatory for `createContext` to work properly\n    options.componentId = componentId;\n    // check if context has its unique id assigned\n    if (!util.isNoU(options.contextId)) {\n        // if it does, try to pick it from allocated contexts list\n        ctx = context(options.contextId);\n        if (ctx !== null) {\n            ctx.options(options);\n        } else {\n            // if no context is already allocated\n            // with that id, then add a new one\n            ctx = createContext(options);\n        }\n    } else {\n        if (options === false)\n            options = {};\n        // generate contextId (this is a bit buggy, but it's quick)\n        options.contextId = 'zuix-ctx-' + (++_contextSeqNum);\n        ctx = createContext(options);\n    }\n} else {\n    // TODO: check if this case is of any use\n    // empty context\n    options = {};\n    ctx = new ComponentContext(options, trigger);\n}\n\n// assign the given component (widget) to this context\nif (ctx.componentId != componentId) {\n    // mutable component, rebind to a different component\n    // preserving current context data\n    ctx.componentId = componentId;",
    "ctx": {
      "type": "declaration",
      "name": "ctx",
      "value": "null",
      "string": "ctx"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "TODO: to be fixed\n         if (!util.isNoU(context.view())) {\n         // TODO: implement this code in a context.detach() method\n         //context.controller().pause()\n         context.view().detach();\n         context.view(null);\n         }",
      "summary": "TODO: to be fixed\n         if (!util.isNoU(context.view())) {\n         // TODO: implement this code in a context.detach() method\n         //context.controller().pause()\n         context.view().detach();\n         context.view(null);\n         }",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 198,
    "codeStart": 206,
    "code": "}\n\nif (util.isFunction(options.ready))\n    ctx.ready = options.ready;\nif (util.isFunction(options.error))\n    ctx.error = options.error;\n\nif (resourceLoadTask[componentId] == null) {\n    resourceLoadTask[componentId] = true;\n    return loadResources(ctx, options);\n} else {\n    if (_pendingResourceTask[componentId] == null)\n        _pendingResourceTask[componentId] = [];\n    _pendingResourceTask[componentId].push({ c: ctx, o: options});\n}\n\nreturn ctx;\n}",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "private",
        "string": "",
        "visibility": "private"
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 225,
    "codeStart": 226,
    "code": "function loadResources(ctx, options) {\n    // pick it from cache if found",
    "ctx": {
      "type": "function",
      "name": "loadResources",
      "string": "loadResources()"
    }
  },
  {
    "tags": [
      {
        "type": "type",
        "string": "{ComponentCache}",
        "types": [
          "ComponentCache"
        ],
        "typesDescription": "<a href=\"ComponentCache.html\">ComponentCache</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 228,
    "codeStart": 229,
    "code": "var cachedComponent = getCachedComponent(ctx.componentId);\nif (cachedComponent !== null && options.controller == null && ctx.controller() == null) {\n    ctx.controller(cachedComponent.controller);\n    _log.t(ctx.componentId+':js', 'component:cached:js');\n}\n\nif (util.isNoU(options.view)) {\n\n    if (cachedComponent !== null && cachedComponent.view != null) {\n        ctx.view(cachedComponent.view);\n        _log.t(ctx.componentId+':html', 'component:cached:html');",
    "ctx": {
      "type": "declaration",
      "name": "cachedComponent",
      "value": "getCachedComponent(ctx.componentId)",
      "string": "cachedComponent"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "TODO: CSS caching, to be tested.",
      "summary": "TODO: CSS caching, to be tested.",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 240,
    "codeStart": 243,
    "code": "if (cachedComponent.view != null && util.isNoU(options.css)) {\n    options.css = false;\n    if (!cachedComponent.css_applied) {\n        cachedComponent.css_applied = true;\n        ctx.style(cachedComponent.css);\n        _log.t(ctx.componentId+':css', 'component:cached:css');\n    }\n}\n        }\n\n        // if not able to inherit the view from the base cachedComponent\n        // or from an inline element, then load the view from web\n        if (util.isNoU(ctx.view())) {\n            // Load View\n            taskQueue('resource-loader').queue(ctx.componentId+':html', function () {\n   resourceLoadTask[ctx.componentId] = this;\n\n   ctx.loadHtml({\n       cext: options.cext,\n       caching: _enableHttpCaching,\n       success: function (html) {\n           if (cachedComponent == null)\n               cachedComponent = cacheComponent(ctx);\n           cachedComponent.view = html;\n           delete cachedComponent.controller;\n           if (options.css !== false) {\n               resourceLoadTask[ctx.componentId].step(ctx.componentId+':css');\n               ctx.loadCss({\n                   caching: _enableHttpCaching,\n                   success: function (css) {\n                       cachedComponent.css = css;\n                   },\n                   error: function (err) {\n                       _log.e(err, ctx);\n                   },\n                   then: function () {\n                       loadController(ctx, resourceLoadTask[ctx.componentId]);\n                   }\n               });\n           } else {\n               loadController(ctx, resourceLoadTask[ctx.componentId]);\n           }\n       },\n       error: function (err) {\n           _log.e(err, ctx);\n           if (util.isFunction(options.error))\n               (ctx.error).call(ctx, err);\n       }\n   });\n\n            }, options.priority);\n            // defer controller loading\n            return ctx;\n        }\n    } else {\n        ctx.view(options.view);\n    }\n    if (ctx.controller() == null) {\n        taskQueue('resource-loader').queue(ctx.componentId + ':js', function () {\n            resourceLoadTask[ctx.componentId] = this;\n            loadController(ctx, resourceLoadTask[ctx.componentId]);\n        }, _contextRoot.length);\n    } else loadController(ctx);\n\n    return ctx;\n}",
    "ctx": {
      "type": "method",
      "name": "if",
      "string": "if()"
    }
  },
  {
    "tags": [
      {
        "type": "private",
        "string": "",
        "visibility": "private"
      },
      {
        "type": "param",
        "string": "context {ComponentContext|Element}",
        "name": "context",
        "description": "{ComponentContext|Element}",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false
      }
    ],
    "description": {
      "full": "Unload and dispose the component.",
      "summary": "Unload and dispose the component.",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 309,
    "codeStart": 315,
    "code": "function unload(context) {\n    if (context instanceof Element) {\n        var el = context;\n        context = zuix.context(el);\n        // remove element from componentizer queue if\n        // it's a lazy-loadable element not yet loaded\n        _componentizer.dequeue(el);\n    }\n    if (!util.isNoU(context)) {\n        if (!util.isNoU(context._c)) {\n            if (!util.isNoU(context._c.view())) {\n                context._c.view().attr('data-ui-component', null);\n                // un-register event handlers associated to the view\n                context._c.view().reset();\n                // un-register event handlers for all cached fields accessed through cp.field(...) method\n                if (!util.isNoU(context._c._fieldCache)) {\n                    z$.each(context._c._fieldCache, function (k, v) {\n                        v.reset();\n                    });\n                }\n                // detach from parent\n                context._c.view().detach();\n            }\n            if (util.isFunction(context._c.destroy))\n                context._c.destroy();\n        }\n        // detach the container from the DOM as well\n        var cel = context.container();\n        if (cel != null && cel.parentNode != null)\n            cel.parentNode.removeChild(cel);\n    }\n}",
    "ctx": {
      "type": "function",
      "name": "unload",
      "string": "unload()"
    }
  },
  {
    "tags": [
      {
        "type": "private",
        "string": "",
        "visibility": "private"
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 348,
    "codeStart": 349,
    "code": "function createContext(options) {\n    var context = new ComponentContext(options, trigger);\n    _contextRoot.push(context);\n    return context;\n}",
    "ctx": {
      "type": "function",
      "name": "createContext",
      "string": "createContext()"
    }
  },
  {
    "tags": [
      {
        "type": "private",
        "string": "",
        "visibility": "private"
      },
      {
        "type": "param",
        "string": "{Element|ZxQuery|object} contextId The `contextId` object\n(usually a string) or the component's container/view element.",
        "name": "contextId",
        "description": "The `contextId` object (usually a string) or the component's container/view element.",
        "types": [
          "Element",
          "ZxQuery",
          "object"
        ],
        "typesDescription": "<code>Element</code>|<a href=\"ZxQuery.html\">ZxQuery</a>|<code>object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{function} [callback] The callback function that will pass the context object once it is ready.",
        "name": "[callback]",
        "description": "The callback function that will pass the context object once it is ready.",
        "types": [
          "function"
        ],
        "typesDescription": "<code>function</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{ComponentContext} The matching component context or `null` if the context does not exists or it is not yet loaded.",
        "types": [
          "ComponentContext"
        ],
        "typesDescription": "<a href=\"ComponentContext.html\">ComponentContext</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "The matching component context or `null` if the context does not exists or it is not yet loaded."
      }
    ],
    "description": {
      "full": "TODO: desc",
      "summary": "TODO: desc",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 355,
    "codeStart": 364,
    "code": "function context(contextId, callback) {\n    var context = null;\n    if (contextId instanceof z$.ZxQuery)\n        contextId = contextId.get();\n    z$.each(_contextRoot, function (k, v) {\n        if ((contextId instanceof Element && (v.view() === contextId || v.container() === contextId))\n            || util.objectEquals(v.contextId, contextId)) {\n            context = v;\n            return false;\n        }\n    });\n    if (typeof callback === 'function' && (contextId instanceof Element || contextId instanceof z$.ZxQuery)) {\n        if (context == null)\n            z$(contextId).one('component:ready', function () {\n                callback(zuix.context(this));\n            });\n        else callback(context);\n    }\n    return context;\n}",
    "ctx": {
      "type": "function",
      "name": "context",
      "string": "context()"
    }
  },
  {
    "tags": [
      {
        "type": "private",
        "string": "",
        "visibility": "private"
      },
      {
        "type": "param",
        "string": "{string} path",
        "name": "path",
        "description": "",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{function|undefined} handler",
        "name": "handler",
        "description": "",
        "types": [
          "function"
        ],
        "typesDescription": "<code>function</code>|<code>undefined</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      }
    ],
    "description": {
      "full": "Register a callback for ZUIX global event (hook).\nThere can be only one callback for each kind of event.\nPass null as <handler> to unregister a previously registered callback.",
      "summary": "Register a callback for ZUIX global event (hook).\nThere can be only one callback for each kind of event.\nPass null as <handler> to unregister a previously registered callback.",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 385,
    "codeStart": 394,
    "code": "function hook(path, handler) {\n    if (util.isNoU(handler))\n        delete _hooksCallbacks[path];\n    else _hooksCallbacks[path] = handler;\n}",
    "ctx": {
      "type": "function",
      "name": "hook",
      "string": "hook()"
    }
  },
  {
    "tags": [
      {
        "type": "private",
        "string": "",
        "visibility": "private"
      },
      {
        "type": "param",
        "string": "{object} context",
        "name": "context",
        "description": "",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{string} path",
        "name": "path",
        "description": "",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{object|undefined} data",
        "name": "data",
        "description": "",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>|<code>undefined</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      }
    ],
    "description": {
      "full": "Fires a ZUIX hook.",
      "summary": "Fires a ZUIX hook.",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 400,
    "codeStart": 408,
    "code": "function trigger(context, path, data) {\n    if (util.isFunction(_hooksCallbacks[path]))\n        _hooksCallbacks[path].call(context, data);\n}",
    "ctx": {
      "type": "function",
      "name": "trigger",
      "string": "trigger()"
    }
  },
  {
    "tags": [
      {
        "type": "private",
        "string": "",
        "visibility": "private"
      },
      {
        "type": "param",
        "string": "{boolean} [enable]",
        "name": "[enable]",
        "description": "",
        "types": [
          "boolean"
        ],
        "typesDescription": "<code>boolean</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{boolean} *true* if HTTP caching is enabled, *false* otherwise.",
        "types": [
          "boolean"
        ],
        "typesDescription": "<code>boolean</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "*true* if HTTP caching is enabled, *false* otherwise."
      }
    ],
    "description": {
      "full": "Enable/Disable HTTP caching",
      "summary": "Enable/Disable HTTP caching",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 413,
    "codeStart": 420,
    "code": "function httpCaching(enable) {\n    if (enable != null)\n        _enableHttpCaching = enable;\n    return _enableHttpCaching;\n}",
    "ctx": {
      "type": "function",
      "name": "httpCaching",
      "string": "httpCaching()"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "********************* private members ************************",
      "summary": "********************* private members ************************",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 426,
    "codeStart": 427
  },
  {
    "tags": [
      {
        "type": "private",
        "string": "",
        "visibility": "private"
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 429,
    "codeStart": 430,
    "code": "function removeCachedComponent(componentId) {\n    // TODO: removeCachedComponent\n}",
    "ctx": {
      "type": "function",
      "name": "removeCachedComponent",
      "string": "removeCachedComponent()"
    }
  },
  {
    "tags": [
      {
        "type": "private",
        "string": "",
        "visibility": "private"
      },
      {
        "type": "param",
        "string": "{Object} componentId",
        "name": "componentId",
        "description": "",
        "types": [
          "Object"
        ],
        "typesDescription": "<code>Object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{ComponentCache}",
        "types": [
          "ComponentCache"
        ],
        "typesDescription": "<a href=\"ComponentCache.html\">ComponentCache</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": ""
      }
    ],
    "description": {
      "full": "*",
      "summary": "*",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 434,
    "codeStart": 439,
    "code": "function getCachedComponent(componentId) {",
    "ctx": {
      "type": "function",
      "name": "getCachedComponent",
      "string": "getCachedComponent()"
    }
  },
  {
    "tags": [
      {
        "type": "type",
        "string": "{ComponentCache}",
        "types": [
          "ComponentCache"
        ],
        "typesDescription": "<a href=\"ComponentCache.html\">ComponentCache</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 440,
    "codeStart": 441,
    "code": "var cached = null;\nz$.each(_componentCache, function (k, v) {\n    if (util.objectEquals(v.componentId, componentId)) {\n        cached = v;\n        return false;\n    }\n});\nreturn cached;\n}",
    "ctx": {
      "type": "declaration",
      "name": "cached",
      "value": "null",
      "string": "cached"
    }
  },
  {
    "tags": [
      {
        "type": "private",
        "string": "",
        "visibility": "private"
      },
      {
        "type": "param",
        "string": "{ComponentContext} context",
        "name": "context",
        "description": "",
        "types": [
          "ComponentContext"
        ],
        "typesDescription": "<a href=\"ComponentContext.html\">ComponentContext</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{TaskQueue} [task]",
        "name": "[task]",
        "description": "",
        "types": [
          "TaskQueue"
        ],
        "typesDescription": "<a href=\"TaskQueue.html\">TaskQueue</a>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      }
    ],
    "description": {
      "full": "*",
      "summary": "*",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 451,
    "codeStart": 456,
    "code": "function loadController(context, task) {\n    if (typeof context.options().controller === 'undefined' && context.controller() === null) {\n        _log.d(context.componentId, 'controller:load');\n        if (!util.isNoU(task))\n            task.step(context.componentId+':js');\n        if (util.isFunction(_globalHandlers[context.componentId])) {\n            context.controller(_globalHandlers[context.componentId]);\n            createComponent(context, task);\n        } else {\n            var job = function(t) {\n                z$.ajax({\n                    url: context.componentId + \".js\" + (_enableHttpCaching ? '' : '?'+new Date().getTime()),\n                    success: function (ctrlJs) {\n                        // TODO: improve js parsing!\n                        try {\n                            var fn = ctrlJs.indexOf('function');\n                            var il = ctrlJs.indexOf('.load');\n                            if (il > 1 && il < fn)\n                                ctrlJs = ctrlJs.substring(0, il - 4);\n                            var ih = ctrlJs.indexOf('.controller');\n                            if (ih > 1 && ih < fn)\n                                ctrlJs = ctrlJs.substring(ih + 11);\n                            var ec = ctrlJs.indexOf('//<--controller');\n                            if (ec > 0)\n                                ctrlJs = ctrlJs.substring(0, ec);\n                            ctrlJs += '\\n//# sourceURL=\"'+context.componentId + '.js\"\\n';\n                            context.controller(getController(ctrlJs));\n                        } catch (e) {\n                            _log.e(new Error(), e, ctrlJs, context);\n                            if (util.isFunction(context.error))\n                                (context.error).call(context, e);\n                        }\n                    },\n                    error: function (err) {\n                        _log.e(err, new Error(), context);\n                        if (util.isFunction(context.error))\n                            (context.error).call(context, err);\n                    },\n                    then: function () {\n                        createComponent(context, t);\n                    }\n                });\n            };\n            if (util.isNoU(task)) {\n                taskQueue('resource-loader').queue(context.componentId+':js', function () {\n                    job(resourceLoadTask[context.componentId] = this);\n                }, context.options().priority);\n            } else job(task);\n        }\n    } else {\n        createComponent(context, task);\n    }\n}\n\nfunction cacheComponent(context) {\n    var html = context.view().innerHTML; //(context.view() === context.container() ? context.view().innerHTML : context.view().outerHTML);\n    var c = z$.wrapElement('div', html);",
    "ctx": {
      "type": "function",
      "name": "loadController",
      "string": "loadController()"
    }
  },
  {
    "tags": [
      {
        "type": "type",
        "string": "{ComponentCache}",
        "types": [
          "ComponentCache"
        ],
        "typesDescription": "<a href=\"ComponentCache.html\">ComponentCache</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 513,
    "codeStart": 514,
    "code": "var cached = {\n    componentId: context.componentId,\n    view: c.innerHTML,\n    css: context._css,\n    controller: context.controller()\n};\n_componentCache.push(cached);\n_log.t(context.componentId, 'bundle:added');\nreturn cached;\n}",
    "ctx": {
      "type": "declaration",
      "name": "cached",
      "value": "{",
      "string": "cached"
    }
  },
  {
    "tags": [
      {
        "type": "private",
        "string": "",
        "visibility": "private"
      },
      {
        "type": "param",
        "string": "{ComponentContext} context",
        "name": "context",
        "description": "",
        "types": [
          "ComponentContext"
        ],
        "typesDescription": "<a href=\"ComponentContext.html\">ComponentContext</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{TaskQueue} [task]",
        "name": "[task]",
        "description": "",
        "types": [
          "TaskQueue"
        ],
        "typesDescription": "<a href=\"TaskQueue.html\">TaskQueue</a>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      }
    ],
    "description": {
      "full": "*",
      "summary": "*",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 525,
    "codeStart": 530,
    "code": "function createComponent(context, task) {\n    resourceLoadTask[context.componentId] = null;\n    if (!util.isNoU(context.view())) {\n        var cached = getCachedComponent(context.componentId);\n        if (!context.options().viewDeferred)\n            if (cached === null)\n                cached = cacheComponent(context);\n            else if (cached.controller == null)\n                cached.controller = context.controller();\n        else\n            _log.w(context.componentId, 'component:deferred:load');\n\n        if (task != null)\n            task.callback(function () {\n                _log.d(context.componentId, 'controller:create:deferred');\n                initController(context._c);\n            });\n\n        _log.d(context.componentId, 'component:initializing');\n        if (util.isFunction(context.controller())) {\n            // TODO: should use 'require' instead of 'new Controller' ... ?",
    "ctx": {
      "type": "function",
      "name": "createComponent",
      "string": "createComponent()"
    }
  },
  {
    "tags": [
      {
        "type": "type",
        "string": "{ContextController}",
        "types": [
          "ContextController"
        ],
        "typesDescription": "<a href=\"ContextController.html\">ContextController</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 551,
    "codeStart": 552,
    "code": "var c = context._c = new ContextController(context);\nc.log = require('../helpers/Logger')(context.contextId);\nif (typeof c.init === 'function')\n    c.init();\nif (!util.isNoU(c.view())) {\n    // if it's not null, a controller was already loaded, so we preserve the base controller name\n    // TODO: when loading multiple controllers perhaps some code paths can be skipped -- check/optimize this!\n    if (c.view().attr('data-ui-component') == null)\n        c.view().attr('data-ui-component', context.componentId);\n    // if no model is supplied, try auto-create from view fields\n    if (util.isNoU(context.model()) && !util.isNoU(context.view()))\n        context.viewToModel();\n    c.trigger('view:apply');\n    if (context.options().viewDeferred) {\n        context.options().viewDeferred = false;\n        // save the original inline view\n        // before loading the view template\n        // it can be then restored with c.restoreView()\n        c.saveView();\n\n        // TODO: check if this case is still required, otherwise remove it.\n        if (cached === null) {\n            cached = {\n                componentId: context.componentId,\n                controller: context.controller()\n            };\n            _componentCache.push(cached);\n            _log.t(context.componentId, 'bundle:added');\n            _log.d(context.componentId, 'component:deferred:load');\n        }\n\n        var pending = -1;\n        if (context.options().css !== false)\n            if (cached.css == null) {\n                if (pending == -1) pending = 0; pending++;\n                context.loadCss({\n                    caching: _enableHttpCaching,\n                    success: function(css) {\n                        // TODO: this is a work-around for 'componentize' overlapping issue\n                        if (cached.css == null)\n                            cached.css = css;\n                        _log.d(context.componentId, 'component:deferred:css', pending);\n                    },\n                    then: function () {\n                        if (--pending === 0 && task != null)\n                            task.end();\n                    }\n                });\n            } else context.style(cached.css);\n        if (context.options().html !== false)\n            if (cached.view == null) {\n                if (pending == -1) pending = 0; pending++;\n                context.loadHtml({\n                    cext: context.options().cext,\n                    caching: _enableHttpCaching,\n                    success: function(html) {\n                        // TODO: this is a work-around for 'componentize' overlapping issue\n                        if (cached.view == null)\n                            cached.view = html;\n                        _log.d(context.componentId, 'component:deferred:html', pending);\n                    },\n                    error: function(err) {\n                        _log.e(err, context);\n                        if (util.isFunction(context.options().error))\n                            (context.options().error).call(context, err);\n                    },\n                    then: function () {\n                        if (--pending === 0 && task != null)\n                            task.end();\n                    }\n                });\n            } else context.view(cached.view);\n        if (pending == -1 && task != null)\n            task.end();\n    } else if (task != null) task.end();\n}\n\nif (task == null) {\n    _log.d(context.componentId, 'controller:create');\n    initController(c);\n}\n\n        } else {\n_log.w(context.componentId, 'component:controller:undefined');\n        }\n\n    } else {\n        // TODO: report error\n        _log.e(context.componentId, 'component:view:undefined');\n    }\n}",
    "ctx": {
      "type": "declaration",
      "name": "c",
      "value": "context._c = new ContextController(context)",
      "string": "c"
    }
  },
  {
    "tags": [
      {
        "type": "private",
        "string": "",
        "visibility": "private"
      },
      {
        "type": "param",
        "string": "{ContextController} c",
        "name": "c",
        "description": "",
        "types": [
          "ContextController"
        ],
        "typesDescription": "<a href=\"ContextController.html\">ContextController</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      }
    ],
    "description": {
      "full": "*",
      "summary": "*",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 644,
    "codeStart": 648,
    "code": "function initController(c) {\n\n    _log.t(c.context.componentId, 'controller:init', 'timer:init:start');\n\n    // bind {ContextController}.field method\n    c.field = function(fieldName) {\n        var el = field(fieldName, c.view(), c);\n        el.on = function (eventPath, eventHandler, eventData, isHook) {\n            if (typeof eventHandler === 'string') {\n                var eh = eventHandler;\n                eventHandler = function () { c.trigger(eh, eventData, isHook); }\n            }\n            return z$.ZxQuery.prototype.on.call(this, eventPath, eventHandler);\n        };\n        return el;\n    };\n\n    if (util.isFunction(c.create)) c.create();\n    c.trigger('view:create');\n\n    if (util.isFunction(c.context.ready))\n        (c.context.ready).call(c.context, c.context);\n\n    c.trigger('component:ready', c.view(), true);\n\n    _log.t(c.context.componentId, 'controller:init', 'timer:init:stop');\n    _log.i(c.context.componentId, 'component:loaded', c.context.contextId);\n\n    if (_pendingResourceTask[c.context.componentId] != null) {\n        var pendingRequests = _pendingResourceTask[c.context.componentId];\n        _pendingResourceTask[c.context.componentId] = null;\n        var ctx = null;\n        while (pendingRequests != null && (ctx = pendingRequests.shift()) != null)\n            loadResources(ctx.c, ctx.o);\n    }\n\n}",
    "ctx": {
      "type": "function",
      "name": "initController",
      "string": "initController()"
    }
  },
  {
    "tags": [
      {
        "type": "private",
        "string": "",
        "visibility": "private"
      },
      {
        "type": "param",
        "string": "javascriptCode string",
        "name": "javascriptCode",
        "description": "string",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false
      },
      {
        "type": "return",
        "string": "{ContextControllerHandler}",
        "types": [
          "ContextControllerHandler"
        ],
        "typesDescription": "<a href=\"ContextControllerHandler.html\">ContextControllerHandler</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": ""
      }
    ],
    "description": {
      "full": "*",
      "summary": "*",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 686,
    "codeStart": 691,
    "code": "// TODO: refactor this method name\nfunction getController(javascriptCode) {\n    var instance = function (ctx) {\n    };\n    if (typeof javascriptCode === 'string') {\n        try {\n            instance = (eval).call(this, javascriptCode);\n        } catch (e) {\n            // TODO: should trigger a global hook\n            // eg. 'controller:error'\n            _log.e(this, e, javascriptCode);\n        }\n    }\n    return instance;\n}\n\nfunction replaceCache(c) {\n    _componentCache = c;\n}",
    "ctx": false
  },
  {
    "tags": [],
    "description": {
      "full": "***************** proto *******************",
      "summary": "***************** proto *******************",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 711,
    "codeStart": 712
  },
  {
    "tags": [
      {
        "type": "example",
        "string": "\n<small>**Example - JavaScript**</small>\n<pre data-line=\"2\"><code class=\"language-js\">\n// Controller of component 'path/to/component_name'\nvar ctrl = zuix.controller(function(cp) {\n    // `cp` is the {ContextController}\n    cp.create = function() { ... };\n    cp.destroy = function() { ... }\n}).for('path/to/component_name');\n</code></pre>"
      },
      {
        "type": "param",
        "string": "{ContextControllerHandler} handler The controller handler\nfunction ```function(cp){ ... } ```,\nwhere `cp` is the [`{ContextController}`](#ZUIX_API--ContextController)\nobject that is passed to the handler once the component\nis created.",
        "name": "handler",
        "description": "The controller handler function ```function(cp){ ... } ```,\nwhere `cp` is the [`{ContextController}`](#ZUIX_API--ContextController)\nobject that is passed to the handler once the component\nis created.",
        "types": [
          "ContextControllerHandler"
        ],
        "typesDescription": "<a href=\"ContextControllerHandler.html\">ContextControllerHandler</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{ContextControllerHandler} The initialized controller handler.",
        "types": [
          "ContextControllerHandler"
        ],
        "typesDescription": "<a href=\"ContextControllerHandler.html\">ContextControllerHandler</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "The initialized controller handler."
      }
    ],
    "description": {
      "full": "Initializes a controller ```handler```.",
      "summary": "Initializes a controller ```handler```.",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 714,
    "codeStart": 736,
    "code": "Zuix.prototype.controller = function(handler) {\n    return controller.call(this, handler);\n};",
    "ctx": {
      "type": "method",
      "constructor": "Zuix",
      "cons": "Zuix",
      "name": "controller",
      "string": "Zuix.prototype.controller()"
    }
  },
  {
    "tags": [
      {
        "type": "example",
        "string": "\n<small>**Example - HTML**</small>\n```html\n<div data-ui-field=\"container-div\">\n   <!-- container HTML -->\n</div>\n```\n\n<small>**Example - JavaScript**</small>\n```js\nvar containerDiv = zuix.field('container-div');\ncontainerDiv.html('Hello World!');\n```"
      },
      {
        "type": "param",
        "string": "{!string} fieldName The class to check for.",
        "name": "fieldName",
        "description": "The class to check for.",
        "types": [
          "string"
        ],
        "typesDescription": "!<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": true,
        "variable": false
      },
      {
        "type": "param",
        "string": "{!Element} [container] Starting DOM element for this search (**default:** *document*)",
        "name": "[container]",
        "description": "Starting DOM element for this search (**default:** *document*)",
        "types": [
          "Element"
        ],
        "typesDescription": "!<code>Element</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": true,
        "variable": false
      },
      {
        "type": "return",
        "string": "{ZxQuery} The `{ZxQuery}`-wrapped elements with matching ```data-ui-field``` attribute.",
        "types": [
          "ZxQuery"
        ],
        "typesDescription": "<a href=\"ZxQuery.html\">ZxQuery</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "The `{ZxQuery}`-wrapped elements with matching ```data-ui-field``` attribute."
      }
    ],
    "description": {
      "full": "Searches and returns elements with `data-ui-field`\nattribute matching the given `fieldName`.",
      "summary": "Searches and returns elements with `data-ui-field`\nattribute matching the given `fieldName`.",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 739,
    "codeStart": 762,
    "code": "Zuix.prototype.field = function(fieldName, container) {\n    return field.call(this, fieldName, container);\n};",
    "ctx": {
      "type": "method",
      "constructor": "Zuix",
      "cons": "Zuix",
      "name": "field",
      "string": "Zuix.prototype.field()"
    }
  },
  {
    "tags": [
      {
        "type": "example",
        "string": "\n<small>**Example - JavaScript**</small>\n```js\nzuix.componentize(document);\n```"
      },
      {
        "type": "param",
        "string": "{Element|ZxQuery} [element] Container to use as starting node for the search (**default:** *document*).",
        "name": "[element]",
        "description": "Container to use as starting node for the search (**default:** *document*).",
        "types": [
          "Element",
          "ZxQuery"
        ],
        "typesDescription": "<code>Element</code>|<a href=\"ZxQuery.html\">ZxQuery</a>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{Zuix} The ```{Zuix}``` object itself.",
        "types": [
          "Zuix"
        ],
        "typesDescription": "<a href=\"Zuix.html\">Zuix</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "The ```{Zuix}``` object itself."
      }
    ],
    "description": {
      "full": "Searches inside the given element ```element```\nfor all ```data-ui-include``` and ```data-ui-load```\ndirectives and process them.\nThis is to be called if adding dynamically content\nwith elements that declare the above attributes.",
      "summary": "Searches inside the given element ```element```\nfor all ```data-ui-include``` and ```data-ui-load```\ndirectives and process them.\nThis is to be called if adding dynamically content\nwith elements that declare the above attributes.",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 765,
    "codeStart": 782,
    "code": "Zuix.prototype.componentize = function (element) {\n    _componentizer.componentize(element);\n    return this;\n};",
    "ctx": {
      "type": "method",
      "constructor": "Zuix",
      "cons": "Zuix",
      "name": "componentize",
      "string": "Zuix.prototype.componentize()"
    }
  },
  {
    "tags": [
      {
        "type": "example",
        "string": "\n<small>**Example - JavaScript**</small>\n```js\nvar exampleController = zuix.controller(function(cp){\n    cp.create = function() {\n        cp.expose('test', testMethod);\n        cp.view().html('Helllo World!');\n    }\n    function testMethod() {\n        console.log('Test method exposing');\n        cp.view().html('A simple test.');\n    }\n});\nvar componentOptions = {\n    container: zuix.field('container-div');\n    controller: exampleController,\n    ready: function () {\n        console.log('Loading complete.');\n        console.log('Component context instance', this);\n    },\n    error: function(error) {\n        console.log('Loading error!', error);\n    }\n};\nvar ctx = zuix.load('path/to/component_name', componentOptions);\nctx.test();\n```"
      },
      {
        "type": "param",
        "string": "{!string} componentId The identifier name of the component to be loaded.",
        "name": "componentId",
        "description": "The identifier name of the component to be loaded.",
        "types": [
          "string"
        ],
        "typesDescription": "!<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": true,
        "variable": false
      },
      {
        "type": "param",
        "string": "{ContextOptions} [options] Options used to initialize the loaded component.",
        "name": "[options]",
        "description": "Options used to initialize the loaded component.",
        "types": [
          "ContextOptions"
        ],
        "typesDescription": "<a href=\"ContextOptions.html\">ContextOptions</a>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{ComponentContext} The component instance context.",
        "types": [
          "ComponentContext"
        ],
        "typesDescription": "<a href=\"ComponentContext.html\">ComponentContext</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "The component instance context."
      }
    ],
    "description": {
      "full": "Loads a component with the given options.\nThis is the programmatic equivalent of\n`data-ui-include` or `data-ui-load`.\nAll available options are described in the\n`ContextOptions` object documentation.",
      "summary": "Loads a component with the given options.\nThis is the programmatic equivalent of\n`data-ui-include` or `data-ui-load`.\nAll available options are described in the\n`ContextOptions` object documentation.",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 786,
    "codeStart": 826,
    "code": "Zuix.prototype.load = function(componentId, options) {\n    return load.call(this, componentId, options);\n};",
    "ctx": {
      "type": "method",
      "constructor": "Zuix",
      "cons": "Zuix",
      "name": "load",
      "string": "Zuix.prototype.load()"
    }
  },
  {
    "tags": [
      {
        "type": "example",
        "string": "\n<small>**Example - JavaScript**</small>\n```js\nzuix.unload(ctx);\n```"
      },
      {
        "type": "param",
        "string": "{ComponentContext|Element} context The `ComponentContext` instance of the\ncomponent to be unloaded or its container element. Pass *Element* type if the\nunderlying component is lazy-loadable and the context might not have been loaded yet.",
        "name": "context",
        "description": "The `ComponentContext` instance of the component to be unloaded or its container element. Pass *Element* type if the\nunderlying component is lazy-loadable and the context might not have been loaded yet.",
        "types": [
          "ComponentContext",
          "Element"
        ],
        "typesDescription": "<a href=\"ComponentContext.html\">ComponentContext</a>|<code>Element</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{Zuix} The ```{Zuix}``` object itself.",
        "types": [
          "Zuix"
        ],
        "typesDescription": "<a href=\"Zuix.html\">Zuix</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "The ```{Zuix}``` object itself."
      }
    ],
    "description": {
      "full": "Unload and dispose the component.",
      "summary": "Unload and dispose the component.",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 829,
    "codeStart": 844,
    "code": "Zuix.prototype.unload = function (context) {\n    unload(context);\n    return this;\n};",
    "ctx": {
      "type": "method",
      "constructor": "Zuix",
      "cons": "Zuix",
      "name": "unload",
      "string": "Zuix.prototype.unload()"
    }
  },
  {
    "tags": [
      {
        "type": "example",
        "string": "<small>**Example - HTML**</small>\n```html\n<div data-ui-load=\"site/components/slideshow\"\n     data-ui-context=\"my-slide-show\">...</div>\n```\n<small>**Example - JavaScript**</small>\n```js\nvar slideShowDiv = zuix.$.find('[data-ui-context=\"my-slide-show\"]');\nvar ctx = zuix.context(slideShowDiv);\n// or\nvar ctx = zuix.context('my-slide-show');\n// call component's exposed methods\nctx.setSlide(1);\n// or\nvar ctx;\nzuix.context('my-slide-show', function(c) {\n    // call component's methods\n    c.setSlide(1);\n    // eventually store a reference to the component for later use\n    ctx = c;\n});\n```"
      },
      {
        "type": "param",
        "string": "{Element|ZxQuery|object} contextId The `contextId` object\n(usually a string) or the component's container/view element.",
        "name": "contextId",
        "description": "The `contextId` object (usually a string) or the component's container/view element.",
        "types": [
          "Element",
          "ZxQuery",
          "object"
        ],
        "typesDescription": "<code>Element</code>|<a href=\"ZxQuery.html\">ZxQuery</a>|<code>object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{function} [callback] The callback function that will pass the context object once it is ready.",
        "name": "[callback]",
        "description": "The callback function that will pass the context object once it is ready.",
        "types": [
          "function"
        ],
        "typesDescription": "<code>function</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{ComponentContext} The matching component context or `null` if the context does not exists or it is not yet loaded.",
        "types": [
          "ComponentContext"
        ],
        "typesDescription": "<a href=\"ComponentContext.html\">ComponentContext</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "The matching component context or `null` if the context does not exists or it is not yet loaded."
      }
    ],
    "description": {
      "full": "Get the `ComponentContext`, given its `contextId`\nor component's container/view element.\nHTML attribute equivalent: `data-ui-context`.",
      "summary": "Get the `ComponentContext`, given its `contextId`\nor component's container/view element.\nHTML attribute equivalent: `data-ui-context`.",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 848,
    "codeStart": 882,
    "code": "Zuix.prototype.context = function(contextId, callback) {\n    return context.call(this, contextId, callback);\n};",
    "ctx": {
      "type": "method",
      "constructor": "Zuix",
      "cons": "Zuix",
      "name": "context",
      "string": "Zuix.prototype.context()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{string} componentId Identifier name of the component to create.",
        "name": "componentId",
        "description": "Identifier name of the component to create.",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{ContextOptions|undefined} [options] Component context options.",
        "name": "[options]",
        "description": "Component context options.",
        "types": [
          "ContextOptions"
        ],
        "typesDescription": "<a href=\"ContextOptions.html\">ContextOptions</a>|<code>undefined</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{ComponentContext}",
        "types": [
          "ComponentContext"
        ],
        "typesDescription": "<a href=\"ComponentContext.html\">ComponentContext</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": ""
      }
    ],
    "description": {
      "full": "Create the component `componentId` and return its `{ComponentContext}` object.\nThe `{ComponentContext}.container()` element is detached from the DOM.\nAfter attaching it to the DOM, `zuix.componentize()` must be called in\norder to load and display the component.",
      "summary": "Create the component `componentId` and return its `{ComponentContext}` object.\nThe `{ComponentContext}.container()` element is detached from the DOM.\nAfter attaching it to the DOM, `zuix.componentize()` must be called in\norder to load and display the component.",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 885,
    "codeStart": 895,
    "code": "Zuix.prototype.createComponent = function(componentId, options) {\n    if (options == null) options = {};\n    if (util.isNoU(options.contextId))\n        options.contextId = 'zuix-ctx-' + (++_contextSeqNum);\n    if (context(options.contextId) != null) {\n        throw ('Context arelady exists.');\n    } else {\n        options.container = document.createElement('div');\n        options.componentId = componentId;\n        _componentizer.applyOptions(options.container, options);\n    }\n    return createContext(options);\n};",
    "ctx": {
      "type": "method",
      "constructor": "Zuix",
      "cons": "Zuix",
      "name": "createComponent",
      "string": "Zuix.prototype.createComponent()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{Object} context Context (`this`) for the event handler",
        "name": "context",
        "description": "Context (`this`) for the event handler",
        "types": [
          "Object"
        ],
        "typesDescription": "<code>Object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{string} eventPath The path of the event to fire.",
        "name": "eventPath",
        "description": "The path of the event to fire.",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{object} [eventData] The data object of the event.",
        "name": "[eventData]",
        "description": "The data object of the event.",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{Zuix} The ```{Zuix}``` object itself.",
        "types": [
          "Zuix"
        ],
        "typesDescription": "<a href=\"Zuix.html\">Zuix</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "The ```{Zuix}``` object itself."
      }
    ],
    "description": {
      "full": "Triggers the event specified by `eventPath`.",
      "summary": "Triggers the event specified by `eventPath`.",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 908,
    "codeStart": 916,
    "code": "Zuix.prototype.trigger = function (context, eventPath, eventData) {\n    trigger(context, eventPath, eventData);\n    return this;\n};",
    "ctx": {
      "type": "method",
      "constructor": "Zuix",
      "cons": "Zuix",
      "name": "trigger",
      "string": "Zuix.prototype.trigger()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{string} eventPath The event path.",
        "name": "eventPath",
        "description": "The event path.",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{function|undefined} eventHandler The handler function.",
        "name": "eventHandler",
        "description": "The handler function.",
        "types": [
          "function"
        ],
        "typesDescription": "<code>function</code>|<code>undefined</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{Zuix} The ```{Zuix}``` object itself.",
        "types": [
          "Zuix"
        ],
        "typesDescription": "<a href=\"Zuix.html\">Zuix</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "The ```{Zuix}``` object itself."
      }
    ],
    "description": {
      "full": "Register a callback for ZUIX global event (hook).\nThere can be only one callback for each kind of event.\nPass null as <eventHandler> to unregister a previously registered callback.\n\n<small>**Example - JavaScript**</small>\n```js\n// The context `this` in the event handlers will be\n// the {ComponentContext} object that sourced the event.\n// The `data` parameter passed to the handlers, is of\n// variant type, depending on the type of the occurring event.\nzuix\n  .hook('load:begin', function(data){\n    loaderMessage.html('Loading \"'+data.task+'\" ...');\n    loaderMessage.show();\n\n}).hook('load:next', function(data){\n    loaderMessage.html('\"'+data.task+'\" done, loading next..');\n\n}).hook('load:end', function(){\n    loaderMessage.hide();\n\n}).hook('html:parse', function (data) {\n    // ShowDown - MarkDown syntax compiler\n    if (this.options().markdown === true && typeof showdown !== 'undefined')\n        data.content = new showdown.Converter()\n            .makeHtml(data.content);\n\n}).hook('css:parse', function (data) {\n    // process css, eg. run a CSS pre-processor\n    // eg. Sass, Less, ...\n\n}).hook('view:process', function (view) {\n    // The view DOM is now fully loaded and ready\n\n    // Prism code syntax highlighter\n    view.find('code').each(function (i, block) {\n        this.addClass('language-javascript');\n        Prism.highlightElement(block);\n    });\n\n    // Force opening of all non-local links in a new window\n    zuix.$('a[href*=\"://\"]').attr('target','_blank');\n\n    // Material Design Light auto-detection\n    // Call DOM upgrade on newly added view elements\n    if (componentHandler)\n        componentHandler.upgradeElements(view.get());\n\n});\n```",
      "summary": "Register a callback for ZUIX global event (hook).\nThere can be only one callback for each kind of event.\nPass null as <eventHandler> to unregister a previously registered callback.",
      "body": "<small>**Example - JavaScript**</small>\n```js\n// The context `this` in the event handlers will be\n// the {ComponentContext} object that sourced the event.\n// The `data` parameter passed to the handlers, is of\n// variant type, depending on the type of the occurring event.\nzuix\n  .hook('load:begin', function(data){\n    loaderMessage.html('Loading \"'+data.task+'\" ...');\n    loaderMessage.show();\n\n}).hook('load:next', function(data){\n    loaderMessage.html('\"'+data.task+'\" done, loading next..');\n\n}).hook('load:end', function(){\n    loaderMessage.hide();\n\n}).hook('html:parse', function (data) {\n    // ShowDown - MarkDown syntax compiler\n    if (this.options().markdown === true && typeof showdown !== 'undefined')\n        data.content = new showdown.Converter()\n            .makeHtml(data.content);\n\n}).hook('css:parse', function (data) {\n    // process css, eg. run a CSS pre-processor\n    // eg. Sass, Less, ...\n\n}).hook('view:process', function (view) {\n    // The view DOM is now fully loaded and ready\n\n    // Prism code syntax highlighter\n    view.find('code').each(function (i, block) {\n        this.addClass('language-javascript');\n        Prism.highlightElement(block);\n    });\n\n    // Force opening of all non-local links in a new window\n    zuix.$('a[href*=\"://\"]').attr('target','_blank');\n\n    // Material Design Light auto-detection\n    // Call DOM upgrade on newly added view elements\n    if (componentHandler)\n        componentHandler.upgradeElements(view.get());\n\n});\n```"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 920,
    "codeStart": 976,
    "code": "Zuix.prototype.hook = function (eventPath, eventHandler) {\n    hook(eventPath, eventHandler);\n    return this;\n};",
    "ctx": {
      "type": "method",
      "constructor": "Zuix",
      "cons": "Zuix",
      "name": "hook",
      "string": "Zuix.prototype.hook()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{boolean} [enable] Enable or disable lazy loading.",
        "name": "[enable]",
        "description": "Enable or disable lazy loading.",
        "types": [
          "boolean"
        ],
        "typesDescription": "<code>boolean</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{number} [threshold] Load-ahead threshold (default is 1.0 => 100% of view size).",
        "name": "[threshold]",
        "description": "Load-ahead threshold (default is 1.0 => 100% of view size).",
        "types": [
          "number"
        ],
        "typesDescription": "<code>number</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{Zuix|boolean} *true* if lazy-loading is enabled, *false* otherwise.",
        "types": [
          "Zuix",
          "boolean"
        ],
        "typesDescription": "<a href=\"Zuix.html\">Zuix</a>|<code>boolean</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "*true* if lazy-loading is enabled, *false* otherwise."
      }
    ],
    "description": {
      "full": "Enable/Disable lazy-loading, or get current setting.",
      "summary": "Enable/Disable lazy-loading, or get current setting.",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 980,
    "codeStart": 987,
    "code": "Zuix.prototype.lazyLoad = function (enable, threshold) {\n    if (enable != null)\n        _componentizer.lazyLoad(enable, threshold);\n    else\n        return _componentizer.lazyLoad();\n    return this;\n};",
    "ctx": {
      "type": "method",
      "constructor": "Zuix",
      "cons": "Zuix",
      "name": "lazyLoad",
      "string": "Zuix.prototype.lazyLoad()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{boolean} [enable]",
        "name": "[enable]",
        "description": "",
        "types": [
          "boolean"
        ],
        "typesDescription": "<code>boolean</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{Zuix|boolean} *true* if HTTP caching is enabled, *false* otherwise.",
        "types": [
          "Zuix",
          "boolean"
        ],
        "typesDescription": "<a href=\"Zuix.html\">Zuix</a>|<code>boolean</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "*true* if HTTP caching is enabled, *false* otherwise."
      }
    ],
    "description": {
      "full": "Enable/Disable HTTP caching",
      "summary": "Enable/Disable HTTP caching",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 994,
    "codeStart": 1000,
    "code": "Zuix.prototype.httpCaching = function(enable) {\n    if (enable != null)\n        httpCaching(enable);\n    else\n        return httpCaching();\n    return this;\n};",
    "ctx": {
      "type": "method",
      "constructor": "Zuix",
      "cons": "Zuix",
      "name": "httpCaching",
      "string": "Zuix.prototype.httpCaching()"
    }
  },
  {
    "tags": [
      {
        "type": "example",
        "string": "\n <small>**Example - JavaScript**</small>\n <pre><code class=\"language-js\">\n // Controller of component 'path/to/component_name'\n zuix.controller(function(cp) {\n    cp.init = function() {\n        zuix.using('script', 'https://some.cdn.js/moment.min.js', function(){\n            // can start using moment.js\n        });\n    };\n    cp.create = function() { ... };\n    cp.destroy = function() { ... }\n});\n </code></pre>"
      },
      {
        "type": "param",
        "string": "{string} resourceType Either `style`, `script` or `component`.",
        "name": "resourceType",
        "description": "Either `style`, `script` or `component`.",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{string} resourcePath Relative or absolute resource url path",
        "name": "resourcePath",
        "description": "Relative or absolute resource url path",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{function} [callback] Callback function to call once resource is loaded.",
        "name": "[callback]",
        "description": "Callback function to call once resource is loaded.",
        "types": [
          "function"
        ],
        "typesDescription": "<code>function</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{void}",
        "types": [],
        "typesDescription": "<code>undefined</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": ""
      }
    ],
    "description": {
      "full": "Load a CSS or Javascript resource. All CSS styles and Javascript scripts\nloaded with this method will be also included in the application bundle.\nIf a resource is already loaded, the request will be ignored.\nThis command is also meant to be used inside components' controller.",
      "summary": "Load a CSS or Javascript resource. All CSS styles and Javascript scripts\nloaded with this method will be also included in the application bundle.\nIf a resource is already loaded, the request will be ignored.\nThis command is also meant to be used inside components' controller.",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 1009,
    "codeStart": 1037,
    "code": "Zuix.prototype.using = function(resourceType, resourcePath, callback) {\n    resourceType = resourceType.toLowerCase();\n    var hashId = resourceType+'-'+resourcePath.hashCode();\n\n    if (resourceType === 'component') {\n\n        var c = context(hashId);\n        if (c == null) {\n            zuix.load(resourcePath, {\n                contextId: hashId,\n                view: '',\n                priority: -10,\n                ready: function (ctx) {\n                    if (typeof callback === 'function')\n                        callback(resourcePath, ctx);\n                },\n                error: function () {\n                    callback(resourcePath, null);\n                }\n            });\n        } else if (typeof callback === 'function') {\n            // already loaded\n            callback(resourcePath, c);\n        }\n\n    } else {\n\n        var isCss = (resourceType === 'style');\n        if (z$.find(resourceType + '[id=\"' + hashId + '\"]').length() === 0) {\n\n            var head = document.head || document.getElementsByTagName('head')[0];\n            var resource = document.createElement(resourceType);\n            if (isCss) {\n                resource.type = 'text/css';\n                resource.id = hashId;\n            } else {\n                resource.type = 'text/javascript';\n                resource.id = hashId;\n            }\n            head.appendChild(resource);\n\n            // TODO: add logging\n            var addResource = function (text) {\n                // TODO: add logging\n                if (isCss) {\n                    if (resource.styleSheet)\n                        resource.styleSheet.cssText = text;\n                    else\n                        resource.appendChild(document.createTextNode(text));\n                } else {\n                    if (resource.innerText)\n                        resource.innerText = text;\n                    else\n                        resource.appendChild(document.createTextNode(text));\n                }\n                if (callback)\n                    callback(resourcePath, hashId);\n            };\n\n            var cid = '_res/' + resourceType + '/' + hashId;\n            var cached = getCachedComponent(cid);\n            if (cached != null) {\n                addResource(isCss ? cached.css : cached.controller);\n            } else {\n                z$.ajax({\n                    url: resourcePath,\n                    success: function (resText) {\n\n                        // TODO: add logging",
    "ctx": {
      "type": "method",
      "constructor": "Zuix",
      "cons": "Zuix",
      "name": "using",
      "string": "Zuix.prototype.using()"
    }
  },
  {
    "tags": [
      {
        "type": "type",
        "string": "{ComponentCache}",
        "types": [
          "ComponentCache"
        ],
        "typesDescription": "<a href=\"ComponentCache.html\">ComponentCache</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 1106,
    "codeStart": 1107,
    "code": "var cached = {\n    componentId: cid,\n    view: null,\n    css: isCss ? resText : null,\n    controller: !isCss ? resText : null,\n    using: resourcePath\n};\n_componentCache.push(cached);\n\naddResource(resText);\n\n                    },\n                    error: function () {\n// TODO: add logging\nhead.removeChild(resource);\nif (callback)\n    callback(resourcePath);\n                    }\n                });\n            }\n\n        } else {\n\n            // TODO: add logging\n            console.log('Resource already added ' + hashId + '(' + resourcePath + ')');\n            if (callback)\n                callback(resourcePath, hashId);\n\n        }\n\n    }\n};",
    "ctx": {
      "type": "declaration",
      "name": "cached",
      "value": "{",
      "string": "cached"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{!Array.<BundleItem>} bundleData A bundle object holding in memory all components data (cache).",
        "name": "bundleData",
        "description": "A bundle object holding in memory all components data (cache).",
        "types": [
          "Array.<BundleItem>"
        ],
        "typesDescription": "!<code>Array</code>.&lt;<a href=\"BundleItem.html\">BundleItem</a>&gt;",
        "optional": false,
        "nullable": false,
        "nonNullable": true,
        "variable": false
      },
      {
        "type": "param",
        "string": "{function} [callback]",
        "name": "[callback]",
        "description": "",
        "types": [
          "function"
        ],
        "typesDescription": "<code>function</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{Zuix|Array.<BundleItem>}",
        "types": [
          "Zuix",
          "Array.<BundleItem>"
        ],
        "typesDescription": "<a href=\"Zuix.html\">Zuix</a>|<code>Array</code>.&lt;<a href=\"BundleItem.html\">BundleItem</a>&gt;",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": ""
      }
    ],
    "description": {
      "full": "Gets/Sets the components data bundle.",
      "summary": "Gets/Sets the components data bundle.",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 1141,
    "codeStart": 1148,
    "code": "Zuix.prototype.bundle = function(bundleData, callback) {\n    if (util.isNoU(bundleData))\n        return _componentCache;\n    else if (bundleData && typeof bundleData === 'boolean') {\n        _log.t('bundle:start');\n        var ll = _componentizer.lazyLoad();\n        _componentizer.lazyLoad(false);\n        _componentizer.componentize();\n        if (typeof callback === 'function') {\n            var waitLoop = function(w) {\n                setTimeout(function () {\n                    if (_componentizer.willLoadMore()) {\n                        _log.t('bundle:wait');\n                        w(w);\n                    } else {\n                        _log.t('bundle:end');\n                        _componentizer.lazyLoad(ll);\n                        callback();\n                    }\n                }, 1000);\n            };\n            waitLoop(waitLoop);\n        }\n    } else {\n        // reset css flag before importing bundle\n        for (var c = 0; c < bundleData.length; c++) {\n            if (bundleData[c].css_applied)\n                delete bundleData[c].css_applied;\n        }\n        _componentCache = bundleData;\n    }\n    return this;\n};\n\nZuix.prototype.$ = z$;\nZuix.prototype.TaskQueue = TaskQueue;\nZuix.prototype.ZxQuery = z$.ZxQuery;\n\nZuix.prototype.dumpCache = function () {\n    return _componentCache;\n};\nZuix.prototype.dumpContexts = function () {\n    return _contextRoot;\n};\n\n// TODO: add zuix.options to configure stuff like\n// TODO: the css/html/js lookup base path (each individually own prop)",
    "ctx": {
      "type": "method",
      "constructor": "Zuix",
      "cons": "Zuix",
      "name": "bundle",
      "string": "Zuix.prototype.bundle()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "root",
        "name": "root",
        "description": "",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false
      },
      {
        "type": "return",
        "string": "{Zuix}",
        "types": [
          "Zuix"
        ],
        "typesDescription": "<a href=\"Zuix.html\">Zuix</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": ""
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 1196,
    "codeStart": 1200,
    "code": "module.exports = function (root) {\n    var zuix = new Zuix();\n    if (document.readyState != 'loading'){\n        zuix.componentize();\n    } else {\n        document.addEventListener('DOMContentLoaded', function () {\n            zuix.componentize();\n        });\n    }\n    // log messages monitor (one global listener)\n    _log.monitor(function (level, args) {\n        if (util.isFunction(zuix.monitor))\n            zuix.monitor(level, Array.prototype.slice.call(args));\n    });\n    return zuix;\n};",
    "ctx": {
      "type": "method",
      "receiver": "module",
      "name": "exports",
      "string": "module.exports()"
    }
  }
]